{"version":3,"sources":["../../src/broadcast.tsx","../../src/broadcast/AudioEnabled.tsx","../../src/shared/primitive.tsx","../../src/shared/utils.ts","../../src/broadcast/context.tsx","../../src/broadcast/Broadcast.tsx","../../src/shared/context.tsx","../../src/broadcast/Controls.tsx","../../src/broadcast/Enabled.tsx","../../src/broadcast/Screenshare.tsx","../../src/shared/Select.tsx","../../src/broadcast/SourceSelect.tsx","../../src/broadcast/StatusIndicator.tsx","../../src/broadcast/Video.tsx","../../src/broadcast/VideoEnabled.tsx","../../src/shared/Container.tsx","../../src/shared/ErrorIndicator.tsx","../../src/shared/Fullscreen.tsx","../../src/shared/LoadingIndicator.tsx","../../src/shared/PictureInPictureTrigger.tsx","../../src/shared/Portal.tsx","../../src/shared/Slider.tsx","../../src/shared/Time.tsx"],"sourcesContent":["export {\n  AudioEnabledIndicator,\n  AudioEnabledTrigger,\n  type AudioEnabledIndicatorProps,\n  type AudioEnabledTriggerProps,\n} from \"./broadcast/AudioEnabled\";\nexport { Root, type BroadcastProps } from \"./broadcast/Broadcast\";\nexport { Controls, type ControlsProps } from \"./broadcast/Controls\";\nexport {\n  EnabledIndicator,\n  EnabledTrigger,\n  type EnabledIndicatorProps,\n  type EnabledTriggerProps,\n} from \"./broadcast/Enabled\";\nexport {\n  ScreenshareIndicator,\n  ScreenshareTrigger,\n  type ScreenshareIndicatorProps,\n  type ScreenshareTriggerProps,\n} from \"./broadcast/Screenshare\";\nexport { SourceSelect, type SourceSelectProps } from \"./broadcast/SourceSelect\";\nexport {\n  StatusIndicator,\n  type StatusIndicatorProps,\n} from \"./broadcast/StatusIndicator\";\nexport { Video, type VideoProps } from \"./broadcast/Video\";\nexport {\n  VideoEnabledIndicator,\n  VideoEnabledTrigger,\n  type VideoEnabledIndicatorProps,\n  type VideoEnabledTriggerProps,\n} from \"./broadcast/VideoEnabled\";\nexport {\n  BroadcastProvider,\n  createBroadcastScope,\n  useBroadcastContext,\n} from \"./broadcast/context\";\nexport type {\n  BroadcastContextValue,\n  BroadcastScopedProps,\n} from \"./broadcast/context\";\nexport {\n  Container,\n  type ContainerProps,\n} from \"./shared/Container\";\nexport {\n  ErrorIndicator,\n  type ErrorIndicatorProps,\n} from \"./shared/ErrorIndicator\";\nexport {\n  FullscreenIndicator,\n  FullscreenTrigger,\n  type FullscreenIndicatorProps,\n  type FullscreenTriggerProps,\n} from \"./shared/Fullscreen\";\nexport {\n  LoadingIndicator,\n  type LoadingIndicatorProps,\n} from \"./shared/LoadingIndicator\";\nexport {\n  PictureInPictureTrigger,\n  type PictureInPictureTriggerProps,\n} from \"./shared/PictureInPictureTrigger\";\nexport {\n  Portal,\n  type PortalProps,\n} from \"./shared/Portal\";\nexport {\n  SelectArrow,\n  SelectContent,\n  SelectGroup,\n  SelectIcon,\n  SelectItem,\n  SelectItemIndicator,\n  SelectItemText,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n  SelectViewport,\n  type SelectArrowProps,\n  type SelectContentProps,\n  type SelectGroupProps,\n  type SelectIconProps,\n  type SelectItemIndicatorProps,\n  type SelectItemProps,\n  type SelectItemTextProps,\n  type SelectLabelProps,\n  type SelectPortalProps,\n  type SelectProps,\n  type SelectScrollDownButtonProps,\n  type SelectScrollUpButtonProps,\n  type SelectSeparatorProps,\n  type SelectTriggerProps,\n  type SelectValueProps,\n  type SelectViewportProps,\n} from \"./shared/Select\";\nexport {\n  Range,\n  Thumb,\n  Track,\n  type RangeProps,\n  type SliderProps,\n  type ThumbProps,\n  type TrackProps,\n} from \"./shared/Slider\";\nexport { Time, type TimeProps } from \"./shared/Time\";\nexport {\n  MediaProvider,\n  createMediaScope,\n  useMediaContext,\n  useStore,\n} from \"./shared/context\";\nexport type { MediaContextValue, MediaScopedProps } from \"./shared/context\";\n","\"use client\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\n\nimport React, { useMemo } from \"react\";\n\nimport { useStore } from \"zustand\";\n\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useShallow } from \"zustand/react/shallow\";\nimport * as Radix from \"../shared/primitive\";\nimport { noPropagate } from \"../shared/utils\";\nimport { type BroadcastScopedProps, useBroadcastContext } from \"./context\";\n\n/**\n * AudioEnabledTrigger\n */\n\nconst AUDIO_ENABLED_TRIGGER_NAME = \"AudioEnabledTrigger\";\n\ntype AudioEnabledTriggerElement = React.ElementRef<\n  typeof Radix.Primitive.button\n>;\n\ninterface AudioEnabledTriggerProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.button> {}\n\nconst AudioEnabledTrigger = React.forwardRef<\n  AudioEnabledTriggerElement,\n  AudioEnabledTriggerProps\n>((props: BroadcastScopedProps<AudioEnabledTriggerProps>, forwardedRef) => {\n  const { __scopeBroadcast, ...audioEnabledProps } = props;\n\n  const broadcastContext = useBroadcastContext(\n    AUDIO_ENABLED_TRIGGER_NAME,\n    __scopeBroadcast,\n  );\n\n  const { audio, title, toggleAudio } = useStore(\n    broadcastContext.store,\n    useShallow(({ audio, aria, __controlsFunctions }) => ({\n      audio,\n      title: aria.audioTrigger,\n      toggleAudio: __controlsFunctions.toggleAudio,\n    })),\n  );\n\n  return (\n    <Radix.Primitive.button\n      type=\"button\"\n      aria-pressed={audio}\n      aria-label={title}\n      title={title}\n      {...audioEnabledProps}\n      onClick={composeEventHandlers(props.onClick, noPropagate(toggleAudio))}\n      ref={forwardedRef}\n      data-livepeer-controls-audio-enabled-trigger=\"\"\n      data-enabled={String(audio)}\n    />\n  );\n});\n\nAudioEnabledTrigger.displayName = AUDIO_ENABLED_TRIGGER_NAME;\n\n/**\n * AudioEnabledIndicator\n */\n\nconst AUDIO_ENABLED_INDICATOR_NAME = \"AudioEnabledIndicator\";\n\ntype AudioEnabledIndicatorElement = React.ElementRef<\n  typeof Radix.Primitive.div\n>;\n\ninterface AudioEnabledIndicatorProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.div> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n  /**\n   * The matcher used to determine whether the element should be shown, given the `audio` state.\n   * Defaults to `true`, which means \"shown when broadcast audio is enabled\".\n   */\n  matcher?: boolean | ((state: boolean) => boolean);\n}\n\nconst AudioEnabledIndicator = React.forwardRef<\n  AudioEnabledIndicatorElement,\n  AudioEnabledIndicatorProps\n>((props: BroadcastScopedProps<AudioEnabledIndicatorProps>, forwardedRef) => {\n  const {\n    __scopeBroadcast,\n    forceMount,\n    matcher = true,\n    ...audioIndicatorProps\n  } = props;\n\n  const broadcastContext = useBroadcastContext(\n    AUDIO_ENABLED_INDICATOR_NAME,\n    __scopeBroadcast,\n  );\n\n  const audio = useStore(broadcastContext.store, ({ audio }) => audio);\n\n  const isPresent = useMemo(\n    () => (typeof matcher === \"boolean\" ? matcher === audio : matcher(audio)),\n    [audio, matcher],\n  );\n\n  return (\n    <Presence present={forceMount || isPresent}>\n      <Radix.Primitive.div\n        {...audioIndicatorProps}\n        ref={forwardedRef}\n        data-livepeer-controls-audio-enabled-indicator=\"\"\n        data-enabled={String(audio)}\n        data-visible={String(isPresent)}\n      />\n    </Presence>\n  );\n});\n\nAudioEnabledIndicator.displayName = AUDIO_ENABLED_INDICATOR_NAME;\n\nexport { AudioEnabledIndicator, AudioEnabledTrigger };\nexport type { AudioEnabledIndicatorProps, AudioEnabledTriggerProps };\n","import { Slot } from \"@radix-ui/react-slot\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nconst NODES = [\n  \"a\",\n  \"audio\",\n  \"button\",\n  \"div\",\n  \"form\",\n  \"h2\",\n  \"h3\",\n  \"img\",\n  \"input\",\n  \"label\",\n  \"li\",\n  \"nav\",\n  \"ol\",\n  \"p\",\n  \"span\",\n  \"svg\",\n  \"ul\",\n  \"video\",\n] as const;\n\n// Temporary while we await merge of this fix:\n// https://github.com/DefinitelyTyped/DefinitelyTyped/pull/55396\n// biome-ignore lint/suspicious/noExplicitAny: any\ntype PropsWithoutRef<P> = P extends any\n  ? \"ref\" extends keyof P\n    ? Pick<P, Exclude<keyof P, \"ref\">>\n    : P\n  : P;\ntype ComponentPropsWithoutRef<T extends React.ElementType> = PropsWithoutRef<\n  React.ComponentProps<T>\n>;\n\ntype Primitives = {\n  [E in (typeof NODES)[number]]: PrimitiveForwardRefComponent<E>;\n};\ntype PrimitivePropsWithRef<E extends React.ElementType> =\n  React.ComponentPropsWithRef<E> & {\n    asChild?: boolean;\n  };\n\ninterface PrimitiveForwardRefComponent<E extends React.ElementType>\n  extends React.ForwardRefExoticComponent<PrimitivePropsWithRef<E>> {}\n\n/* -------------------------------------------------------------------------------------------------\n * Primitive\n * -----------------------------------------------------------------------------------------------*/\n\nconst Primitive = NODES.reduce((primitive, node) => {\n  const Node = React.forwardRef(\n    // biome-ignore lint/suspicious/noExplicitAny: any\n    (props: PrimitivePropsWithRef<typeof node>, forwardedRef: any) => {\n      const { asChild, ...primitiveProps } = props;\n      // biome-ignore lint/suspicious/noExplicitAny: any\n      const Comp: any = asChild ? Slot : node;\n\n      React.useEffect(() => {\n        // biome-ignore lint/suspicious/noExplicitAny: any\n        (window as any)[Symbol.for(\"radix-ui\")] = true;\n      }, []);\n\n      return <Comp {...primitiveProps} ref={forwardedRef} />;\n    },\n  );\n\n  Node.displayName = `Primitive.${node}`;\n\n  // biome-ignore lint/performance/noAccumulatingSpread: no spread\n  return { ...primitive, [node]: Node };\n}, {} as Primitives);\n\n/* -------------------------------------------------------------------------------------------------\n * Utils\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * Flush custom event dispatch\n * https://github.com/radix-ui/primitives/pull/1378\n *\n * React batches *all* event handlers since version 18, this introduces certain considerations when using custom event types.\n *\n * Internally, React prioritizes events in the following order:\n *  - discrete\n *  - continuous\n *  - default\n *\n * https://github.com/facebook/react/blob/a8a4742f1c54493df00da648a3f9d26e3db9c8b5/packages/react-dom/src/events/ReactDOMEventListener.js#L294-L350\n *\n * `discrete` is an  important distinction as updates within these events are applied immediately.\n * React however, is not able to infer the priority of custom event types due to how they are detected internally.\n * Because of this, it's possible for updates from custom events to be unexpectedly batched when\n * dispatched by another `discrete` event.\n *\n * In order to ensure that updates from custom events are applied predictably, we need to manually flush the batch.\n * This utility should be used when dispatching a custom event from within another `discrete` event, this utility\n * is not necessary when dispatching known event types, or if dispatching a custom type inside a non-discrete event.\n * For example:\n *\n * dispatching a known click 👎\n * target.dispatchEvent(new Event(‘click’))\n *\n * dispatching a custom type within a non-discrete event 👎\n * onScroll={(event) => event.target.dispatchEvent(new CustomEvent(‘customType’))}\n *\n * dispatching a custom type within a `discrete` event 👍\n * onPointerDown={(event) => dispatchDiscreteCustomEvent(event.target, new CustomEvent(‘customType’))}\n *\n * Note: though React classifies `focus`, `focusin` and `focusout` events as `discrete`, it's  not recommended to use\n * this utility with them. This is because it's possible for those handlers to be called implicitly during render\n * e.g. when focus is within a component as it is unmounted, or when managing focus on mount.\n */\n\nfunction dispatchDiscreteCustomEvent<E extends CustomEvent>(\n  target: E[\"target\"],\n  event: E,\n) {\n  if (target) ReactDOM.flushSync(() => target.dispatchEvent(event));\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = Primitive;\n\nexport {\n  Primitive,\n  //\n  Root,\n  //\n  dispatchDiscreteCustomEvent,\n};\nexport type { ComponentPropsWithoutRef, PrimitivePropsWithRef };\n","export const noPropagate =\n  <\n    E extends {\n      stopPropagation(): void;\n    },\n  >(\n    // biome-ignore lint/suspicious/noExplicitAny: any\n    cb: (...args: any) => any,\n  ) =>\n  (event: E) => {\n    event.stopPropagation();\n\n    return cb();\n  };\n","import type { BroadcastStore } from \"@livepeer/core-web/broadcast\";\nimport { createContextScope } from \"@radix-ui/react-context\";\n\nimport type { Scope } from \"@radix-ui/react-context\";\n\nconst MEDIA_NAME = \"Broadcast\";\n\n// biome-ignore lint/complexity/noBannedTypes: allow {}\ntype BroadcastScopedProps<P = {}> = P & { __scopeBroadcast?: Scope };\nconst [createBroadcastContext, createBroadcastScope] =\n  createContextScope(MEDIA_NAME);\n\ntype BroadcastContextValue = {\n  store: BroadcastStore;\n};\n\nconst [BroadcastProvider, useBroadcastContext] =\n  createBroadcastContext<BroadcastContextValue>(MEDIA_NAME);\n\nexport { BroadcastProvider, createBroadcastScope, useBroadcastContext };\nexport type { BroadcastContextValue, BroadcastScopedProps };\n","\"use client\";\n\nimport React, { type PropsWithChildren, useEffect, useRef } from \"react\";\n\nimport {\n  type InitialBroadcastProps,\n  createBroadcastStore,\n  getBroadcastDeviceInfo,\n} from \"@livepeer/core-web/broadcast\";\nimport { getDeviceInfo } from \"@livepeer/core-web/browser\";\nimport {\n  type InitialProps,\n  addMediaMetricsToStore,\n  createControllerStore,\n} from \"@livepeer/core/media\";\nimport { createStorage, noopStorage } from \"@livepeer/core/storage\";\nimport { version } from \"@livepeer/core/version\";\nimport { MediaProvider, type MediaScopedProps } from \"../shared/context\";\nimport { BroadcastProvider, type BroadcastScopedProps } from \"./context\";\n\ninterface BroadcastProps\n  extends PropsWithChildren<\n    Omit<Partial<InitialBroadcastProps>, \"aspectRatio\" | \"ingestUrl\"> &\n      Pick<\n        Partial<InitialProps>,\n        \"onError\" | \"storage\" | \"timeout\" | \"videoQuality\"\n      >\n  > {\n  /**\n   * The WHIP WebRTC ingest URL for the Broadcast. The ingestUrl can be created using `getIngest`\n   * from a string (assumed to be stream keys or URLs), Cloudflare stream data, Cloudflare URL data,\n   * or Livepeer stream data.\n   */\n  ingestUrl: string | null;\n\n  /**\n   * The aspect ratio of the media. Defaults to 16 / 9.\n   * This significantly improves cumulative layout shift.\n   * Set to `null` to render a plain div primitive.\n   *\n   * @see {@link https://web.dev/cls/}\n   */\n  aspectRatio?: number | null;\n}\n\nconst Broadcast = (\n  props: MediaScopedProps<BroadcastScopedProps<BroadcastProps>>,\n) => {\n  const {\n    aspectRatio = 16 / 9,\n    children,\n    ingestUrl,\n    onError,\n    storage,\n    timeout,\n    videoQuality,\n    ...rest\n  } = props;\n\n  const mediaStore = useRef(\n    createControllerStore({\n      device: getDeviceInfo(version.react),\n      storage: createStorage(\n        storage !== null && typeof window !== \"undefined\"\n          ? {\n              storage: window.localStorage,\n            }\n          : {\n              storage: noopStorage,\n            },\n      ),\n      src: null,\n      initialProps: {\n        hotkeys: \"broadcast\",\n        aspectRatio,\n        volume: 0,\n        onError,\n        timeout,\n        videoQuality,\n      },\n    }),\n  );\n\n  const broadcastStore = useRef(\n    createBroadcastStore({\n      device: getBroadcastDeviceInfo(version.react),\n      storage: createStorage(\n        storage !== null && typeof window !== \"undefined\"\n          ? {\n              storage: window.localStorage,\n            }\n          : {\n              storage: noopStorage,\n            },\n      ),\n      ingestUrl,\n      initialProps: {\n        aspectRatio,\n        ...rest,\n      },\n    }),\n  );\n\n  useEffect(() => {\n    return () => {\n      mediaStore?.current?.destroy?.();\n      broadcastStore?.current?.destroy?.();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (ingestUrl) {\n      broadcastStore.current.store\n        .getState()\n        .__controlsFunctions.setIngestUrl(ingestUrl);\n    }\n  }, [ingestUrl]);\n\n  useEffect(() => {\n    const metrics = addMediaMetricsToStore(mediaStore.current.store);\n\n    return () => {\n      metrics.destroy();\n    };\n  }, []);\n\n  return (\n    <MediaProvider store={mediaStore.current.store} scope={props.__scopeMedia}>\n      <BroadcastProvider\n        store={broadcastStore.current.store}\n        scope={props.__scopeBroadcast}\n      >\n        {children}\n      </BroadcastProvider>\n    </MediaProvider>\n  );\n};\n\nBroadcast.displayName = \"Broadcast\";\n\nconst Root = Broadcast;\n\nexport { Root };\nexport type { BroadcastProps };\n","import type { MediaControllerStore } from \"@livepeer/core/media\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useStore as useStoreZustand } from \"zustand\";\n\nimport type { Scope } from \"@radix-ui/react-context\";\n\nconst MEDIA_NAME = \"Media\";\n\n// biome-ignore lint/complexity/noBannedTypes: allow {}\ntype MediaScopedProps<P = {}> = P & { __scopeMedia?: Scope };\nconst [createMediaContext, createMediaScope] = createContextScope(MEDIA_NAME);\n\ntype MediaContextValue = {\n  store: MediaControllerStore;\n};\n\nconst [MediaProvider, useMediaContext] =\n  createMediaContext<MediaContextValue>(MEDIA_NAME);\n\nconst useStore = useStoreZustand;\n\nexport { MediaProvider, createMediaScope, useMediaContext, useStore };\nexport type { MediaContextValue, MediaScopedProps };\n","\"use client\";\n\nimport { Presence } from \"@radix-ui/react-presence\";\n\nimport React, { useEffect, useMemo } from \"react\";\n\nimport { useStore } from \"zustand\";\n\nimport { useShallow } from \"zustand/react/shallow\";\nimport { type MediaScopedProps, useMediaContext } from \"../shared/context\";\nimport * as Radix from \"../shared/primitive\";\nimport { type BroadcastScopedProps, useBroadcastContext } from \"./context\";\n\nconst CONTROLS_NAME = \"Controls\";\n\ntype ControlsElement = React.ElementRef<typeof Radix.Primitive.div>;\n\ninterface ControlsProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.div> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n  /**\n   * Auto-hide the controls after a mouse or touch interaction (in milliseconds).\n   *\n   * Defaults to 3000. Set to 0 for no hiding.\n   */\n  autoHide?: number;\n}\n\nconst Controls = React.forwardRef<ControlsElement, ControlsProps>(\n  (\n    props: MediaScopedProps<BroadcastScopedProps<ControlsProps>>,\n    forwardedRef,\n  ) => {\n    const {\n      forceMount,\n      __scopeMedia,\n      __scopeBroadcast,\n      onClick,\n      style,\n      autoHide,\n      ...controlsProps\n    } = props;\n\n    const context = useMediaContext(CONTROLS_NAME, __scopeMedia);\n\n    const { hidden, loading, error } = useStore(\n      context.store,\n      useShallow(({ hidden, loading, error }) => ({\n        hidden,\n        loading,\n        error: error?.type ?? null,\n      })),\n    );\n\n    const broadcastContext = useBroadcastContext(\n      CONTROLS_NAME,\n      __scopeBroadcast,\n    );\n\n    const { isWebRTCSupported } = useStore(\n      broadcastContext.store,\n      useShallow(({ enabled, __device }) => ({\n        enabled,\n        isWebRTCSupported: __device.isMediaDevicesSupported,\n      })),\n    );\n\n    const shown = useMemo(\n      () => !hidden && !loading && !error && isWebRTCSupported,\n      [hidden, loading, error, isWebRTCSupported],\n    );\n\n    // biome-ignore lint/correctness/useExhaustiveDependencies: only set once to prevent flashing\n    useEffect(() => {\n      if (autoHide !== undefined) {\n        context.store.getState().__controlsFunctions.setAutohide(autoHide);\n      }\n    }, []);\n\n    return (\n      <Presence present={forceMount || shown}>\n        <Radix.Primitive.div\n          {...controlsProps}\n          ref={forwardedRef}\n          data-livepeer-controls=\"\"\n          data-visible={String(shown)}\n          style={{\n            ...style,\n            // ensures controls expands in ratio\n            position: \"absolute\",\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n          }}\n        />\n      </Presence>\n    );\n  },\n);\n\nControls.displayName = CONTROLS_NAME;\n\nexport { Controls };\nexport type { ControlsProps };\n","\"use client\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\n\nimport React, { useMemo } from \"react\";\n\nimport { useStore } from \"zustand\";\n\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useShallow } from \"zustand/react/shallow\";\nimport { type MediaScopedProps, useMediaContext } from \"../shared/context\";\nimport * as Radix from \"../shared/primitive\";\nimport { noPropagate } from \"../shared/utils\";\nimport { type BroadcastScopedProps, useBroadcastContext } from \"./context\";\n\n/**\n * EnabledTrigger\n */\n\nconst ENABLED_TRIGGER_NAME = \"EnabledTrigger\";\n\ntype EnabledTriggerElement = React.ElementRef<typeof Radix.Primitive.button>;\n\ninterface EnabledTriggerProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.button> {}\n\nconst EnabledTrigger = React.forwardRef<\n  EnabledTriggerElement,\n  EnabledTriggerProps\n>((props: BroadcastScopedProps<EnabledTriggerProps>, forwardedRef) => {\n  const { __scopeBroadcast, ...playProps } = props;\n\n  const broadcastContext = useBroadcastContext(\n    ENABLED_TRIGGER_NAME,\n    __scopeBroadcast,\n  );\n\n  const { enabled, title, toggleEnabled } = useStore(\n    broadcastContext.store,\n    useShallow(({ enabled, aria, __controlsFunctions }) => ({\n      enabled,\n      title: aria.start,\n      toggleEnabled: __controlsFunctions.toggleEnabled,\n    })),\n  );\n\n  return (\n    <Radix.Primitive.button\n      type=\"button\"\n      aria-pressed={enabled}\n      aria-label={title}\n      title={title}\n      {...playProps}\n      onClick={composeEventHandlers(props.onClick, noPropagate(toggleEnabled))}\n      ref={forwardedRef}\n      data-livepeer-controls-enabled-trigger=\"\"\n      data-enabled={String(enabled)}\n    />\n  );\n});\n\nEnabledTrigger.displayName = ENABLED_TRIGGER_NAME;\n\n/**\n * EnabledIndicator\n */\n\nconst ENABLED_INDICATOR_NAME = \"EnabledIndicator\";\n\ntype EnabledIndicatorElement = React.ElementRef<typeof Radix.Primitive.div>;\n\ninterface EnabledIndicatorProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.div> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n  /**\n   * The matcher used to determine whether the element should be shown, given the `enabled` state.\n   * Defaults to `true`, which means \"shown when broadcasting is enabled\".\n   */\n  matcher?: boolean | ((state: boolean) => boolean);\n}\n\nconst EnabledIndicator = React.forwardRef<\n  EnabledIndicatorElement,\n  EnabledIndicatorProps\n>(\n  (\n    props: MediaScopedProps<BroadcastScopedProps<EnabledIndicatorProps>>,\n    forwardedRef,\n  ) => {\n    const {\n      __scopeBroadcast,\n      __scopeMedia,\n      forceMount,\n      matcher = true,\n      ...playPauseIndicatorProps\n    } = props;\n\n    const context = useMediaContext(ENABLED_INDICATOR_NAME, __scopeMedia);\n\n    const loading = useStore(context.store, ({ loading }) => loading);\n\n    const broadcastContext = useBroadcastContext(\n      ENABLED_INDICATOR_NAME,\n      __scopeBroadcast,\n    );\n\n    const enabled = useStore(broadcastContext.store, ({ enabled }) => enabled);\n\n    const isPresent = useMemo(\n      () =>\n        !loading &&\n        (typeof matcher === \"boolean\" ? matcher === enabled : matcher(enabled)),\n      [enabled, matcher, loading],\n    );\n\n    return (\n      <Presence present={forceMount || isPresent}>\n        <Radix.Primitive.div\n          {...playPauseIndicatorProps}\n          ref={forwardedRef}\n          data-livepeer-controls-enabled-indicator=\"\"\n          data-enabled={String(enabled)}\n          data-visible={String(isPresent)}\n        />\n      </Presence>\n    );\n  },\n);\n\nEnabledIndicator.displayName = ENABLED_INDICATOR_NAME;\n\nexport { EnabledIndicator, EnabledTrigger };\nexport type { EnabledIndicatorProps, EnabledTriggerProps };\n","\"use client\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\n\nimport React, { useMemo } from \"react\";\n\nimport { useStore } from \"zustand\";\n\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useShallow } from \"zustand/react/shallow\";\nimport * as Radix from \"../shared/primitive\";\nimport { noPropagate } from \"../shared/utils\";\nimport { type BroadcastScopedProps, useBroadcastContext } from \"./context\";\n\n/**\n * ScreenshareTrigger\n */\n\nconst SCREENSHARE_TRIGGER_NAME = \"ScreenshareTrigger\";\n\ntype ScreenshareTriggerElement = React.ElementRef<\n  typeof Radix.Primitive.button\n>;\n\ninterface ScreenshareTriggerProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.button> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst ScreenshareTrigger = React.forwardRef<\n  ScreenshareTriggerElement,\n  ScreenshareTriggerProps\n>((props: BroadcastScopedProps<ScreenshareTriggerProps>, forwardedRef) => {\n  const { __scopeBroadcast, forceMount, ...screenshareProps } = props;\n\n  const broadcastContext = useBroadcastContext(\n    SCREENSHARE_TRIGGER_NAME,\n    __scopeBroadcast,\n  );\n\n  const { isSupported, isActive, title, toggleDisplayMedia } = useStore(\n    broadcastContext.store,\n    useShallow(({ mediaDeviceIds, aria, __device, __controlsFunctions }) => ({\n      isActive: mediaDeviceIds.videoinput === \"screen\",\n      title: aria.screenshareTrigger,\n      toggleDisplayMedia: __controlsFunctions.toggleDisplayMedia,\n      isSupported: __device.isDisplayMediaSupported,\n    })),\n  );\n\n  return (\n    <Presence present={forceMount || isSupported}>\n      <Radix.Primitive.button\n        type=\"button\"\n        aria-pressed={isActive}\n        aria-label={title}\n        title={title}\n        {...screenshareProps}\n        onClick={composeEventHandlers(\n          props.onClick,\n          noPropagate(toggleDisplayMedia),\n        )}\n        ref={forwardedRef}\n        data-livepeer-controls-screenshare-trigger=\"\"\n        data-active={String(isActive)}\n        data-visible={String(isSupported)}\n      />\n    </Presence>\n  );\n});\n\nScreenshareTrigger.displayName = SCREENSHARE_TRIGGER_NAME;\n\n/**\n * ScreenshareIndicator\n */\n\nconst SCREENSHARE_INDICATOR_NAME = \"ScreenshareIndicator\";\n\ntype ScreenshareIndicatorElement = React.ElementRef<typeof Radix.Primitive.div>;\n\ninterface ScreenshareIndicatorProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.div> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n  /**\n   * The matcher used to determine whether the element should be shown, given the screenshare state.\n   * Defaults to `true`, which means \"shown when screenshare is active\".\n   */\n  matcher?: boolean | ((state: boolean) => boolean);\n}\n\nconst ScreenshareIndicator = React.forwardRef<\n  ScreenshareIndicatorElement,\n  ScreenshareIndicatorProps\n>((props: BroadcastScopedProps<ScreenshareIndicatorProps>, forwardedRef) => {\n  const {\n    __scopeBroadcast,\n    forceMount,\n    matcher = true,\n    ...audioIndicatorProps\n  } = props;\n\n  const broadcastContext = useBroadcastContext(\n    SCREENSHARE_INDICATOR_NAME,\n    __scopeBroadcast,\n  );\n\n  const { isActive, isSupported } = useStore(\n    broadcastContext.store,\n    ({ mediaDeviceIds, __device }) => ({\n      isActive: mediaDeviceIds.videoinput === \"screen\",\n      isSupported: __device.isDisplayMediaSupported,\n    }),\n  );\n\n  const isPresent = useMemo(\n    () =>\n      isSupported\n        ? typeof matcher === \"boolean\"\n          ? matcher === isActive\n          : matcher(isActive)\n        : false,\n    [isSupported, isActive, matcher],\n  );\n\n  return (\n    <Presence present={forceMount || isPresent}>\n      <Radix.Primitive.div\n        {...audioIndicatorProps}\n        ref={forwardedRef}\n        data-livepeer-controls-screenshare-indicator=\"\"\n        data-active={String(isActive)}\n        data-visible={String(isPresent)}\n      />\n    </Presence>\n  );\n});\n\nScreenshareIndicator.displayName = SCREENSHARE_INDICATOR_NAME;\n\nexport { ScreenshareIndicator, ScreenshareTrigger };\nexport type { ScreenshareIndicatorProps, ScreenshareTriggerProps };\n","\"use client\";\n\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\n\nconst SelectRoot = SelectPrimitive.Root;\nconst SelectTrigger = SelectPrimitive.SelectTrigger;\nconst SelectValue = SelectPrimitive.SelectValue;\nconst SelectIcon = SelectPrimitive.SelectIcon;\nconst SelectPortal = SelectPrimitive.SelectPortal;\nconst SelectContent = SelectPrimitive.SelectContent;\nconst SelectViewport = SelectPrimitive.SelectViewport;\nconst SelectGroup = SelectPrimitive.SelectGroup;\nconst SelectLabel = SelectPrimitive.SelectLabel;\nconst SelectItem = SelectPrimitive.SelectItem;\nconst SelectItemText = SelectPrimitive.SelectItemText;\nconst SelectItemIndicator = SelectPrimitive.SelectItemIndicator;\nconst SelectScrollUpButton = SelectPrimitive.SelectScrollUpButton;\nconst SelectScrollDownButton = SelectPrimitive.SelectScrollDownButton;\nconst SelectSeparator = SelectPrimitive.SelectSeparator;\nconst SelectArrow = SelectPrimitive.SelectArrow;\n\ntype SelectProps = SelectPrimitive.SelectProps;\ntype SelectTriggerProps = SelectPrimitive.SelectTriggerProps;\ntype SelectValueProps = SelectPrimitive.SelectValueProps;\ntype SelectIconProps = SelectPrimitive.SelectIconProps;\ntype SelectPortalProps = SelectPrimitive.SelectPortalProps;\ntype SelectContentProps = SelectPrimitive.SelectContentProps;\ntype SelectViewportProps = SelectPrimitive.SelectViewportProps;\ntype SelectGroupProps = SelectPrimitive.SelectGroupProps;\ntype SelectLabelProps = SelectPrimitive.SelectLabelProps;\ntype SelectItemProps = SelectPrimitive.SelectItemProps;\ntype SelectItemTextProps = SelectPrimitive.SelectItemTextProps;\ntype SelectItemIndicatorProps = SelectPrimitive.SelectItemIndicatorProps;\ntype SelectScrollUpButtonProps = SelectPrimitive.SelectScrollUpButtonProps;\ntype SelectScrollDownButtonProps = SelectPrimitive.SelectScrollDownButtonProps;\ntype SelectSeparatorProps = SelectPrimitive.SelectSeparatorProps;\ntype SelectArrowProps = SelectPrimitive.SelectArrowProps;\n\nexport {\n  SelectArrow,\n  SelectContent,\n  SelectGroup,\n  SelectIcon,\n  SelectItem,\n  SelectItemIndicator,\n  SelectItemText,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n  SelectViewport,\n};\n\nexport type {\n  SelectArrowProps,\n  SelectContentProps,\n  SelectGroupProps,\n  SelectIconProps,\n  SelectItemIndicatorProps,\n  SelectItemProps,\n  SelectItemTextProps,\n  SelectLabelProps,\n  SelectPortalProps,\n  SelectProps,\n  SelectScrollDownButtonProps,\n  SelectScrollUpButtonProps,\n  SelectSeparatorProps,\n  SelectTriggerProps,\n  SelectValueProps,\n  SelectViewportProps,\n};\n","\"use client\";\n\nimport * as SelectPrimitive from \"../shared/Select\";\n\n// biome-ignore lint/style/useImportType: necessary import\nimport React, { useCallback } from \"react\";\n\nimport { useStore } from \"zustand\";\nimport type { MediaScopedProps } from \"../shared/context\";\n\nimport type {\n  AudioDeviceId,\n  MediaDeviceInfoExtended,\n} from \"@livepeer/core-web/broadcast\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useShallow } from \"zustand/react/shallow\";\nimport type * as Radix from \"../shared/primitive\";\nimport { type BroadcastScopedProps, useBroadcastContext } from \"./context\";\n\nconst SOURCE_SELECT_NAME = \"SourceSelect\";\n\ninterface SourceSelectProps\n  extends Omit<\n    Radix.ComponentPropsWithoutRef<typeof SelectPrimitive.SelectRoot>,\n    \"children\"\n  > {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n\n  /**\n   * The type of media device to filter the list by.\n   */\n  type: \"audioinput\" | \"videoinput\";\n\n  /**\n   * Children which consume the media device info passed down via a function.\n   *\n   * @param devices the media device info for all available media devices.\n   * @returns Select children using the media devices.\n   */\n  children: (devices: MediaDeviceInfoExtended[] | null) => React.ReactNode;\n}\n\nconst SourceSelect = (\n  props: MediaScopedProps<BroadcastScopedProps<SourceSelectProps>>,\n) => {\n  const {\n    __scopeMedia,\n    __scopeBroadcast,\n    forceMount,\n    type,\n    children,\n    ...controlsProps\n  } = props;\n\n  const broadcastContext = useBroadcastContext(\n    SOURCE_SELECT_NAME,\n    __scopeBroadcast,\n  );\n\n  const {\n    video,\n    audio,\n    mediaDevices,\n    isSupported,\n    mediaDeviceIds,\n    requestMediaDeviceId,\n  } = useStore(\n    broadcastContext.store,\n    useShallow(\n      ({\n        video,\n        audio,\n        mediaDevices,\n        __device,\n        mediaDeviceIds,\n        __controlsFunctions,\n      }) => ({\n        video,\n        audio,\n        mediaDevices: mediaDevices?.filter((d) => d.kind === type) ?? null,\n        isSupported: __device.isMediaDevicesSupported,\n        requestMediaDeviceId: __controlsFunctions.requestMediaDeviceId,\n        mediaDeviceIds,\n      }),\n    ),\n  );\n\n  const setMediaDeviceIdComposed = useCallback(\n    (deviceId: AudioDeviceId) => {\n      requestMediaDeviceId(deviceId, type);\n    },\n    [requestMediaDeviceId, type],\n  );\n\n  return (\n    <Presence present={forceMount || isSupported}>\n      <SelectPrimitive.SelectRoot\n        disabled={type === \"audioinput\" ? !audio : !video}\n        {...controlsProps}\n        value={mediaDeviceIds[type] ?? undefined}\n        onValueChange={composeEventHandlers(\n          props.onValueChange,\n          setMediaDeviceIdComposed,\n        )}\n        data-livepeer-source-select=\"\"\n        data-type={type}\n        data-visible={String(isSupported)}\n      >\n        {children(mediaDevices)}\n      </SelectPrimitive.SelectRoot>\n    </Presence>\n  );\n};\n\nSourceSelect.displayName = SOURCE_SELECT_NAME;\n\nexport { SourceSelect };\nexport type { SourceSelectProps };\n","\"use client\";\n\nimport React, { useMemo } from \"react\";\n\nimport type { BroadcastStatus } from \"@livepeer/core-web/broadcast\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useStore } from \"zustand\";\nimport { type BroadcastScopedProps, useBroadcastContext } from \"../broadcast\";\nimport * as Radix from \"../shared/primitive\";\n\nconst STATUS_INDICATOR_NAME = \"StatusIndicator\";\n\ntype StatusIndicatorElement = React.ElementRef<typeof Radix.Primitive.button>;\n\ninterface StatusIndicatorProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.button> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n  /**\n   * The matcher used to determine whether the element should be shown, given the broadcast `status` state.\n   *\n   * Pending indicates that the stream is currently negotiating WebRTC connection with the server.\n   *\n   * Required.\n   */\n  matcher: BroadcastStatus | ((status: BroadcastStatus) => boolean);\n}\n\nconst StatusIndicator = React.forwardRef<\n  StatusIndicatorElement,\n  StatusIndicatorProps\n>((props: BroadcastScopedProps<StatusIndicatorProps>, forwardedRef) => {\n  const {\n    __scopeBroadcast,\n    forceMount,\n    matcher = true,\n    ...statusIndicatorProps\n  } = props;\n\n  const broadcastContext = useBroadcastContext(\n    STATUS_INDICATOR_NAME,\n    __scopeBroadcast,\n  );\n\n  const status = useStore(broadcastContext.store, ({ status }) => status);\n\n  const isPresent = useMemo(\n    () =>\n      typeof matcher === \"function\" ? matcher(status) : matcher === status,\n    [matcher, status],\n  );\n\n  return (\n    <Presence present={forceMount || isPresent}>\n      <Radix.Primitive.span\n        aria-label={status}\n        {...statusIndicatorProps}\n        ref={forwardedRef}\n        data-livepeer-controls-status-indicator=\"\"\n        data-status={String(status)}\n        data-visible={String(isPresent)}\n      />\n    </Presence>\n  );\n});\n\nStatusIndicator.displayName = STATUS_INDICATOR_NAME;\n\nexport { StatusIndicator };\nexport type { StatusIndicatorProps };\n","\"use client\";\n\nimport React, { useEffect } from \"react\";\nimport { useStore } from \"zustand\";\n\nimport { addEventListeners } from \"@livepeer/core-web/browser\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { type MediaScopedProps, useMediaContext } from \"../shared/context\";\n\nimport { addBroadcastEventListeners } from \"@livepeer/core-web/broadcast\";\nimport * as Radix from \"../shared/primitive\";\nimport { type BroadcastScopedProps, useBroadcastContext } from \"./context\";\n\nconst VIDEO_NAME = \"Video\";\n\ntype OmittedProps = \"src\" | \"poster\";\n\ntype VideoElement = React.ElementRef<typeof Radix.Primitive.video>;\n\ninterface VideoProps\n  extends Omit<\n    Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.video>,\n    OmittedProps\n  > {\n  /**\n   * Whether the element should request permissions for the video/audio\n   * input from the user. This defaults to `true`, which means on component mount,\n   * the user will receive a permissions request asking for access to their microphone\n   * and camera.\n   *\n   * This can be used as a controlled input to determine when this request should be made,\n   * and toggled on after mount.\n   */\n  // enableUserMedia?: boolean;\n}\n\nconst Video = React.forwardRef<VideoElement, VideoProps>(\n  (props: MediaScopedProps<BroadcastScopedProps<VideoProps>>, forwardedRef) => {\n    const {\n      __scopeMedia,\n      __scopeBroadcast,\n      style,\n      muted = true,\n      ...broadcastProps\n    } = props;\n\n    const context = useMediaContext(VIDEO_NAME, __scopeMedia);\n    const broadcastContext = useBroadcastContext(VIDEO_NAME, __scopeBroadcast);\n\n    const ref = React.useRef<VideoElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n\n    const isEnabled = useStore(\n      broadcastContext.store,\n      ({ enabled }) => enabled,\n    );\n\n    useEffect(() => {\n      if (ref.current) {\n        const { destroy } = addEventListeners(ref.current, context.store);\n\n        return destroy;\n      }\n    }, [context?.store]);\n\n    // biome-ignore lint/correctness/useExhaustiveDependencies: context\n    useEffect(() => {\n      if (ref.current) {\n        const { destroy } = addBroadcastEventListeners(\n          ref.current,\n          broadcastContext.store,\n          context.store,\n        );\n\n        return destroy;\n      }\n    }, []);\n\n    // biome-ignore lint/correctness/useExhaustiveDependencies: context\n    React.useEffect(() => {\n      context.store.getState().__controlsFunctions.setMounted();\n    }, []);\n\n    return (\n      <Radix.Primitive.video\n        playsInline\n        muted={muted}\n        {...broadcastProps}\n        ref={composedRefs}\n        data-livepeer-video=\"\"\n        data-enabled={Boolean(isEnabled)}\n        style={{\n          ...style,\n          // ensures video expands in ratio\n          position: \"absolute\",\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0,\n        }}\n      />\n    );\n  },\n);\n\nVideo.displayName = VIDEO_NAME;\n\nexport { Video };\nexport type { VideoProps };\n","\"use client\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\n\nimport React, { useMemo } from \"react\";\n\nimport { useStore } from \"zustand\";\n\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useShallow } from \"zustand/react/shallow\";\nimport * as Radix from \"../shared/primitive\";\nimport { noPropagate } from \"../shared/utils\";\nimport { type BroadcastScopedProps, useBroadcastContext } from \"./context\";\n\n/**\n * VideoEnabledTrigger\n */\n\nconst VIDEO_ENABLED_TRIGGER_NAME = \"VideoEnabledTrigger\";\n\ntype VideoEnabledTriggerElement = React.ElementRef<\n  typeof Radix.Primitive.button\n>;\n\ninterface VideoEnabledTriggerProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.button> {}\n\nconst VideoEnabledTrigger = React.forwardRef<\n  VideoEnabledTriggerElement,\n  VideoEnabledTriggerProps\n>((props: BroadcastScopedProps<VideoEnabledTriggerProps>, forwardedRef) => {\n  const { __scopeBroadcast, ...videoEnabledProps } = props;\n\n  const broadcastContext = useBroadcastContext(\n    VIDEO_ENABLED_TRIGGER_NAME,\n    __scopeBroadcast,\n  );\n\n  const { video, title, toggleVideo } = useStore(\n    broadcastContext.store,\n    useShallow(({ video, aria, __controlsFunctions }) => ({\n      video,\n      title: aria.videoTrigger,\n      toggleVideo: __controlsFunctions.toggleVideo,\n    })),\n  );\n\n  return (\n    <Radix.Primitive.button\n      type=\"button\"\n      aria-pressed={video}\n      aria-label={title}\n      title={title}\n      {...videoEnabledProps}\n      onClick={composeEventHandlers(props.onClick, noPropagate(toggleVideo))}\n      ref={forwardedRef}\n      data-livepeer-controls-video-enabled-trigger=\"\"\n      data-enabled={String(video)}\n    />\n  );\n});\n\nVideoEnabledTrigger.displayName = VIDEO_ENABLED_TRIGGER_NAME;\n\n/**\n * VideoEnabledIndicator\n */\n\nconst VIDEO_ENABLED_INDICATOR_NAME = \"VideoEnabledIndicator\";\n\ntype VideoEnabledIndicatorElement = React.ElementRef<\n  typeof Radix.Primitive.div\n>;\n\ninterface VideoEnabledIndicatorProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.div> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n  /**\n   * The matcher used to determine whether the element should be shown, given the `video` state.\n   * Defaults to `true`, which means \"shown when broadcast video is enabled\".\n   */\n  matcher?: boolean | ((state: boolean) => boolean);\n}\n\nconst VideoEnabledIndicator = React.forwardRef<\n  VideoEnabledIndicatorElement,\n  VideoEnabledIndicatorProps\n>((props: BroadcastScopedProps<VideoEnabledIndicatorProps>, forwardedRef) => {\n  const {\n    __scopeBroadcast,\n    forceMount,\n    matcher = true,\n    ...videoIndicatorProps\n  } = props;\n\n  const broadcastContext = useBroadcastContext(\n    VIDEO_ENABLED_INDICATOR_NAME,\n    __scopeBroadcast,\n  );\n\n  const video = useStore(broadcastContext.store, ({ video }) => video);\n\n  const isPresent = useMemo(\n    () => (typeof matcher === \"boolean\" ? matcher === video : matcher(video)),\n    [video, matcher],\n  );\n\n  return (\n    <Presence present={forceMount || isPresent}>\n      <Radix.Primitive.div\n        {...videoIndicatorProps}\n        ref={forwardedRef}\n        data-livepeer-controls-video-enabled-indicator=\"\"\n        data-enabled={String(video)}\n      />\n    </Presence>\n  );\n});\n\nVideoEnabledIndicator.displayName = VIDEO_ENABLED_INDICATOR_NAME;\n\nexport { VideoEnabledIndicator, VideoEnabledTrigger };\nexport type { VideoEnabledIndicatorProps, VideoEnabledTriggerProps };\n","\"use client\";\n\nimport React from \"react\";\n\nimport * as RadixAspectRatio from \"@radix-ui/react-aspect-ratio\";\nimport { useStore } from \"zustand\";\nimport { useShallow } from \"zustand/react/shallow\";\nimport { type MediaScopedProps, useMediaContext } from \"./context\";\nimport * as Radix from \"./primitive\";\n\nconst CONTAINER_NAME = \"Container\";\n\ntype ContainerElement = React.ElementRef<typeof Radix.Primitive.div>;\ntype ContainerProps = Radix.ComponentPropsWithoutRef<\n  typeof Radix.Primitive.div\n>;\n\nconst Container = React.memo(\n  React.forwardRef<ContainerElement, MediaScopedProps<ContainerProps>>(\n    (props, forwardedRef) => {\n      const { __scopeMedia, ...aspectRatioProps } = props;\n\n      const context = useMediaContext(CONTAINER_NAME, __scopeMedia);\n\n      const {\n        aspectRatio,\n        fullscreen,\n        playing,\n        canPlay,\n        rate,\n        error,\n        live,\n        hasPlayed,\n        hidden,\n        pictureInPicture,\n        loading,\n        videoQuality,\n      } = useStore(\n        context.store,\n        useShallow(\n          ({\n            __initialProps,\n            fullscreen,\n            playing,\n            canPlay,\n            playbackRate,\n            error,\n            live,\n            hasPlayed,\n            hidden,\n            pictureInPicture,\n            loading,\n            videoQuality,\n          }) => ({\n            aspectRatio: __initialProps.aspectRatio,\n            fullscreen,\n            playing,\n            canPlay,\n            error: Boolean(error),\n            rate:\n              playbackRate === \"constant\"\n                ? \"constant\"\n                : playbackRate > 1\n                  ? \"fast\"\n                  : playbackRate < 1\n                    ? \"slow\"\n                    : \"normal\",\n            live,\n            hasPlayed,\n            hidden,\n            pictureInPicture,\n            loading,\n            videoQuality,\n          }),\n        ),\n      );\n\n      return aspectRatio ? (\n        <RadixAspectRatio.Root\n          ratio={aspectRatio}\n          {...aspectRatioProps}\n          ref={forwardedRef}\n          data-livepeer-aspect-ratio=\"\"\n          data-fullscreen={String(fullscreen)}\n          data-playing={String(playing)}\n          data-can-play={String(canPlay)}\n          data-playback-rate={rate}\n          data-error={String(error)}\n          data-loading={String(loading)}\n          data-live={String(live)}\n          data-has-played={String(hasPlayed)}\n          data-controls-hidden={String(hidden)}\n          data-picture-in-picture={String(pictureInPicture)}\n          data-video-quality={String(videoQuality)}\n        />\n      ) : (\n        <Radix.Primitive.div\n          {...aspectRatioProps}\n          ref={forwardedRef}\n          data-livepeer-wrapper=\"\"\n          data-fullscreen={String(fullscreen)}\n          data-playing={String(playing)}\n          data-can-play={String(canPlay)}\n          data-playback-rate={rate}\n          data-error={String(error)}\n          data-loading={String(loading)}\n          data-live={String(live)}\n          data-has-played={String(hasPlayed)}\n          data-controls-hidden={String(hidden)}\n          data-picture-in-picture={String(pictureInPicture)}\n          data-video-quality={String(videoQuality)}\n        />\n      );\n    },\n  ),\n);\n\nContainer.displayName = CONTAINER_NAME;\n\nexport { Container, type ContainerProps };\n","\"use client\";\n\nimport React, { useMemo } from \"react\";\n\nimport type { PlaybackError } from \"@livepeer/core/media\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useStore } from \"zustand\";\nimport { type MediaScopedProps, useMediaContext } from \"./context\";\nimport * as Radix from \"./primitive\";\n\nconst ERROR_INDICATOR_NAME = \"ErrorIndicator\";\n\ntype ErrorIndicatorElement = React.ElementRef<typeof Radix.Primitive.div>;\n\ninterface ErrorIndicatorProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.div> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n  /**\n   * The matcher used to determine whether the element should be shown, given the error state.\n   *\n   * Passing `all` means it will display on all errors, and `not-permissions` is only errors\n   * that are not failed camera, audio, or display permissions requests.\n   */\n  matcher:\n    | \"all\"\n    | \"not-permissions\"\n    | PlaybackError[\"type\"]\n    | ((state: PlaybackError[\"type\"]) => boolean);\n}\n\nconst ErrorIndicator = React.forwardRef<\n  ErrorIndicatorElement,\n  ErrorIndicatorProps\n>((props: MediaScopedProps<ErrorIndicatorProps>, forwardedRef) => {\n  const { __scopeMedia, forceMount, matcher, ...offlineErrorProps } = props;\n\n  const context = useMediaContext(ERROR_INDICATOR_NAME, __scopeMedia);\n\n  const error = useStore(context.store, ({ error }) => error);\n\n  const isPresent = useMemo(\n    () =>\n      error\n        ? typeof matcher === \"string\"\n          ? matcher === \"all\"\n            ? true\n            : matcher === \"not-permissions\"\n              ? error.type !== \"permissions\"\n              : matcher === error.type\n          : matcher(error.type)\n        : false,\n    [error, matcher],\n  );\n\n  return (\n    <Presence present={forceMount || isPresent}>\n      <Radix.Primitive.div\n        {...offlineErrorProps}\n        ref={forwardedRef}\n        data-livepeer-error-indicator=\"\"\n        data-error-state={String(Boolean(error))}\n        data-error-type={error?.type ?? \"none\"}\n        data-visible={String(isPresent)}\n      />\n    </Presence>\n  );\n});\n\nErrorIndicator.displayName = ERROR_INDICATOR_NAME;\n\nexport { ErrorIndicator };\nexport type { ErrorIndicatorProps };\n","\"use client\";\n\nimport React, { useMemo } from \"react\";\n\nimport { useStore } from \"zustand\";\nimport { type MediaScopedProps, useMediaContext } from \"./context\";\n\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useShallow } from \"zustand/react/shallow\";\nimport * as Radix from \"./primitive\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\n\nimport { noPropagate } from \"./utils\";\n\n/**\n * FullscreenIndicator\n */\n\nconst FULLSCREEN_INDICATOR_NAME = \"FullscreenIndicator\";\n\ntype FullscreenIndicatorElement = React.ElementRef<typeof Radix.Primitive.div>;\n\ninterface FullscreenIndicatorProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.div> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n  /** The matcher used to determine whether the element should be shown, given the fullscreen state. Defaults to `true`. */\n  matcher?: boolean | ((fullscreen: boolean) => boolean);\n}\n\nconst FullscreenIndicator = React.forwardRef<\n  FullscreenIndicatorElement,\n  FullscreenIndicatorProps\n>((props: MediaScopedProps<FullscreenIndicatorProps>, forwardedRef) => {\n  const {\n    __scopeMedia,\n    forceMount,\n    matcher = true,\n    ...fullscreenIndicatorProps\n  } = props;\n\n  const context = useMediaContext(FULLSCREEN_INDICATOR_NAME, __scopeMedia);\n\n  const fullscreen = useStore(\n    context.store,\n    useShallow(({ fullscreen }) => fullscreen),\n  );\n\n  const isPresent = useMemo(\n    () =>\n      typeof matcher === \"function\"\n        ? matcher(fullscreen)\n        : matcher === fullscreen,\n    [matcher, fullscreen],\n  );\n\n  return (\n    <Presence present={forceMount || isPresent}>\n      <Radix.Primitive.div\n        {...fullscreenIndicatorProps}\n        ref={forwardedRef}\n        data-livepeer-controls-fullscreen-indicator=\"\"\n        data-fullscreen={String(Boolean(fullscreen))}\n        data-visible={String(isPresent)}\n      />\n    </Presence>\n  );\n});\n\nFullscreenIndicator.displayName = FULLSCREEN_INDICATOR_NAME;\n\n/**\n * FullscreenTrigger\n */\n\nconst FULLSCREEN_TRIGGER_NAME = \"FullscreenTrigger\";\n\ntype FullscreenTriggerElement = React.ElementRef<typeof Radix.Primitive.button>;\n\ninterface FullscreenTriggerProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.button> {}\n\nconst FullscreenTrigger = React.forwardRef<\n  FullscreenTriggerElement,\n  FullscreenTriggerProps\n>((props: MediaScopedProps<FullscreenTriggerProps>, forwardedRef) => {\n  const { __scopeMedia, ...fullscreenProps } = props;\n\n  const context = useMediaContext(FULLSCREEN_TRIGGER_NAME, __scopeMedia);\n\n  const { title, fullscreen, requestToggleFullscreen } = useStore(\n    context.store,\n    useShallow(({ fullscreen, __controlsFunctions, aria }) => ({\n      fullscreen,\n      requestToggleFullscreen: __controlsFunctions.requestToggleFullscreen,\n      title: aria.fullscreen,\n    })),\n  );\n\n  return (\n    <Radix.Primitive.button\n      type=\"button\"\n      aria-pressed={fullscreen}\n      aria-label={title ?? undefined}\n      title={title ?? undefined}\n      {...fullscreenProps}\n      onClick={composeEventHandlers(\n        props.onClick,\n        noPropagate(requestToggleFullscreen),\n      )}\n      ref={forwardedRef}\n      data-livepeer-controls-fullscreen-trigger=\"\"\n      data-fullscreen-state={String(Boolean(fullscreen))}\n    />\n  );\n});\n\nFullscreenTrigger.displayName = FULLSCREEN_TRIGGER_NAME;\n\nexport { FullscreenIndicator, FullscreenTrigger };\nexport type { FullscreenIndicatorProps, FullscreenTriggerProps };\n","\"use client\";\n\nimport React, { useMemo } from \"react\";\n\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useStore } from \"zustand\";\nimport { type MediaScopedProps, useMediaContext } from \"./context\";\nimport * as Radix from \"./primitive\";\n\nconst LOADING_INDICATOR_NAME = \"LoadingIndicator\";\n\ntype LoadingIndicatorElement = React.ElementRef<typeof Radix.Primitive.div>;\n\ninterface LoadingIndicatorProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.div> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n  /** The matcher used to determine whether the element should be shown, given the `loading` state. Defaults to `true`. */\n  matcher?: boolean | ((live: boolean) => boolean);\n}\n\nconst LoadingIndicator = React.forwardRef<\n  LoadingIndicatorElement,\n  LoadingIndicatorProps\n>((props: MediaScopedProps<LoadingIndicatorProps>, forwardedRef) => {\n  const {\n    __scopeMedia,\n    forceMount,\n    matcher = true,\n    ...offlineErrorProps\n  } = props;\n\n  const context = useMediaContext(LOADING_INDICATOR_NAME, __scopeMedia);\n\n  const loading = useStore(context.store, ({ loading }) => loading);\n\n  const isPresent = useMemo(\n    () =>\n      typeof matcher === \"function\" ? matcher(loading) : matcher === loading,\n    [matcher, loading],\n  );\n\n  return (\n    <Presence present={forceMount || isPresent}>\n      <Radix.Primitive.div\n        aria-label={\"Loading\"}\n        {...offlineErrorProps}\n        ref={forwardedRef}\n        data-livepeer-loading-indicator=\"\"\n        data-loading={String(Boolean(loading))}\n        data-visible={String(isPresent)}\n      />\n    </Presence>\n  );\n});\n\nLoadingIndicator.displayName = LOADING_INDICATOR_NAME;\n\nexport { LoadingIndicator };\nexport type { LoadingIndicatorProps };\n","\"use client\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { Presence } from \"@radix-ui/react-presence\";\n\nimport React from \"react\";\n\nimport { useStore } from \"zustand\";\nimport { type MediaScopedProps, useMediaContext } from \"./context\";\n\nimport { useShallow } from \"zustand/react/shallow\";\nimport * as Radix from \"./primitive\";\nimport { noPropagate } from \"./utils\";\n\nconst PICTURE_IN_PICTURE_TRIGGER_NAME = \"PictureInPictureTrigger\";\n\ntype PictureInPictureTriggerElement = React.ElementRef<\n  typeof Radix.Primitive.button\n>;\n\ninterface PictureInPictureTriggerProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.button> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst PictureInPictureTrigger = React.forwardRef<\n  PictureInPictureTriggerElement,\n  PictureInPictureTriggerProps\n>((props: MediaScopedProps<PictureInPictureTriggerProps>, forwardedRef) => {\n  const { __scopeMedia, forceMount, ...pictureInPictureProps } = props;\n\n  const context = useMediaContext(\n    PICTURE_IN_PICTURE_TRIGGER_NAME,\n    __scopeMedia,\n  );\n\n  const {\n    pictureInPicture,\n    requestTogglePictureInPicture,\n    isPictureInPictureSupported,\n    fullscreen,\n    title,\n  } = useStore(\n    context.store,\n    useShallow(\n      ({\n        pictureInPicture,\n        __controlsFunctions,\n        __device,\n        fullscreen,\n        aria,\n      }) => ({\n        pictureInPicture,\n        requestTogglePictureInPicture:\n          __controlsFunctions.requestTogglePictureInPicture,\n        isPictureInPictureSupported: __device.isPictureInPictureSupported,\n        fullscreen,\n        title: aria.pictureInPicture,\n      }),\n    ),\n  );\n\n  return (\n    // do not show button if it is not supported or if currently fullscreen\n    <Presence\n      present={forceMount || (isPictureInPictureSupported && !fullscreen)}\n    >\n      <Radix.Primitive.button\n        type=\"button\"\n        aria-pressed={pictureInPicture}\n        aria-label={title ?? undefined}\n        title={title ?? undefined}\n        {...pictureInPictureProps}\n        onClick={composeEventHandlers(\n          props.onClick,\n          noPropagate(requestTogglePictureInPicture),\n        )}\n        ref={forwardedRef}\n        data-livepeer-controls-picture-in-picture-trigger=\"\"\n        data-picture-in-picture={String(Boolean(pictureInPicture))}\n        data-visible={String(isPictureInPictureSupported && !fullscreen)}\n      />\n    </Presence>\n  );\n});\n\nPictureInPictureTrigger.displayName = PICTURE_IN_PICTURE_TRIGGER_NAME;\n\nexport { PictureInPictureTrigger };\nexport type { PictureInPictureTriggerProps };\n","\"use client\";\n\n// biome-ignore lint/style/useImportType: necessary import\nimport React from \"react\";\n\nimport * as RadixPortal from \"@radix-ui/react-portal\";\n\nconst PORTAL_NAME = \"Portal\";\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof RadixPortal.Root>;\n\nconst Portal: React.FC<PortalProps> = (props: PortalProps) => {\n  return <RadixPortal.Root {...props} />;\n};\n\nPortal.displayName = PORTAL_NAME;\n\nexport { Portal, type PortalProps };\n","\"use client\";\n\nimport * as SliderPrimitive from \"@radix-ui/react-slider\";\n\ntype SliderProps = SliderPrimitive.SliderProps;\nconst Root = SliderPrimitive.Root;\ntype TrackProps = SliderPrimitive.SliderTrackProps;\nconst Track = SliderPrimitive.Track;\ntype RangeProps = SliderPrimitive.SliderRangeProps;\nconst Range = SliderPrimitive.Range;\ntype ThumbProps = SliderPrimitive.SliderThumbProps;\nconst Thumb = SliderPrimitive.Thumb;\n\nexport { Range, Root, Thumb, Track };\nexport type { RangeProps, SliderProps, ThumbProps, TrackProps };\n","\"use client\";\n\nimport React from \"react\";\n\nimport { useStore } from \"zustand\";\nimport { type MediaScopedProps, useMediaContext } from \"./context\";\n\nimport { useShallow } from \"zustand/react/shallow\";\nimport * as Radix from \"./primitive\";\n\nconst TIME_NAME = \"Time\";\n\ntype TimeElement = React.ElementRef<typeof Radix.Primitive.button>;\n\ninterface TimeProps\n  extends Omit<\n    Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.button>,\n    \"children\"\n  > {}\n\nconst Time = React.forwardRef<TimeElement, TimeProps>(\n  (props: MediaScopedProps<TimeProps>, forwardedRef) => {\n    const { __scopeMedia, ...timeProps } = props;\n\n    const context = useMediaContext(TIME_NAME, __scopeMedia);\n\n    const { progress, duration, live, formattedTime } = useStore(\n      context.store,\n      useShallow(({ progress, duration, live, aria }) => ({\n        formattedTime: aria.time,\n        progress,\n        duration,\n        live,\n      })),\n    );\n\n    return (\n      <Radix.Primitive.span\n        aria-label={formattedTime ?? undefined}\n        title={formattedTime ?? undefined}\n        {...timeProps}\n        ref={forwardedRef}\n        data-livepeer-controls-time=\"\"\n        data-duration={duration}\n        data-progress={progress}\n        data-live={String(live)}\n      >\n        {formattedTime}\n      </Radix.Primitive.span>\n    );\n  },\n);\n\nTime.displayName = TIME_NAME;\n\nexport { Time };\nexport type { TimeProps };\n"],"mappings":"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","names":["Range","SelectArrow","SelectContent","SelectGroup","SelectIcon","SelectItem","SelectItemIndicator","SelectItemText","SelectLabel","SelectPortal","SelectScrollDownButton","SelectScrollUpButton","SelectSeparator","SelectTrigger","SelectValue","SelectViewport","Thumb","Track","useStore","React","audio","import_react","import_react_context","import_zustand","MEDIA_NAME","useStore","useStoreZustand","React","import_react_presence","import_react","import_zustand","import_shallow","React","hidden","loading","error","import_primitive","import_react","import_zustand","import_react_presence","import_shallow","React","enabled","loading","import_primitive","import_react","import_zustand","import_react_presence","import_shallow","React","SelectTrigger","SelectValue","SelectIcon","SelectPortal","SelectContent","SelectViewport","SelectGroup","SelectLabel","SelectItem","SelectItemText","SelectItemIndicator","SelectScrollUpButton","SelectScrollDownButton","SelectSeparator","SelectArrow","import_react","import_zustand","import_primitive","import_react_presence","import_shallow","video","audio","mediaDevices","mediaDeviceIds","React","import_react","import_react_presence","import_zustand","React","status","import_react","import_zustand","import_browser","import_broadcast","React","import_primitive","import_react","import_zustand","import_react_presence","import_shallow","React","video","import_react","import_zustand","import_shallow","React","fullscreen","playing","canPlay","error","live","hasPlayed","hidden","pictureInPicture","loading","videoQuality","import_react","import_react_presence","import_zustand","React","error","import_react","import_zustand","import_react_presence","import_shallow","import_primitive","React","fullscreen","import_react","import_react_presence","import_zustand","React","loading","import_primitive","import_react_presence","import_react","import_zustand","import_shallow","React","pictureInPicture","fullscreen","import_react","React","Track","Range","Thumb","import_react","import_zustand","import_shallow","React","progress","duration","live"]}