{"version":3,"sources":["../../src/player.tsx","../../src/player/ClipTrigger.tsx","../../src/shared/primitive.tsx","../../src/shared/context.tsx","../../src/shared/utils.ts","../../src/player/Controls.tsx","../../src/player/LiveIndicator.tsx","../../src/player/MuteTrigger.tsx","../../src/player/Play.tsx","../../src/player/Player.tsx","../../src/player/Poster.tsx","../../src/shared/Select.tsx","../../src/player/RateSelect.tsx","../../src/player/Seek.tsx","../../src/shared/Slider.tsx","../../src/player/Video.tsx","../../src/player/VideoQualitySelect.tsx","../../src/player/Volume.tsx","../../src/shared/Container.tsx","../../src/shared/ErrorIndicator.tsx","../../src/shared/Fullscreen.tsx","../../src/shared/LoadingIndicator.tsx","../../src/shared/PictureInPictureTrigger.tsx","../../src/shared/Portal.tsx","../../src/shared/Time.tsx"],"sourcesContent":["export {\n  ClipTrigger,\n  type ClipTriggerProps,\n} from \"./player/ClipTrigger\";\nexport { Controls, type ControlsProps } from \"./player/Controls\";\nexport {\n  LiveIndicator,\n  type LiveIndicatorProps,\n} from \"./player/LiveIndicator\";\nexport {\n  MuteTrigger,\n  type MuteTriggerProps,\n} from \"./player/MuteTrigger\";\nexport {\n  PlayPauseTrigger,\n  PlayingIndicator,\n  type PlayPauseTriggerProps,\n  type PlayingIndicatorProps,\n} from \"./player/Play\";\nexport { Root, type PlayerProps } from \"./player/Player\";\nexport {\n  Poster,\n  type PosterProps,\n} from \"./player/Poster\";\nexport {\n  RateSelect,\n  RateSelectItem,\n  type RateSelectItemProps,\n  type RateSelectProps,\n} from \"./player/RateSelect\";\nexport {\n  Seek,\n  SeekBuffer,\n  type SeekBufferProps,\n  type SeekProps,\n} from \"./player/Seek\";\nexport { Video, type VideoProps } from \"./player/Video\";\nexport {\n  VideoQualitySelect,\n  VideoQualitySelectItem,\n  type VideoQualitySelectItemProps,\n  type VideoQualitySelectProps,\n} from \"./player/VideoQualitySelect\";\nexport {\n  Volume,\n  VolumeIndicator,\n  type VolumeIndicatorProps,\n  type VolumeProps,\n} from \"./player/Volume\";\nexport {\n  Container,\n  type ContainerProps,\n} from \"./shared/Container\";\nexport {\n  ErrorIndicator,\n  type ErrorIndicatorProps,\n} from \"./shared/ErrorIndicator\";\nexport {\n  FullscreenIndicator,\n  FullscreenTrigger,\n  type FullscreenIndicatorProps,\n  type FullscreenTriggerProps,\n} from \"./shared/Fullscreen\";\nexport {\n  LoadingIndicator,\n  type LoadingIndicatorProps,\n} from \"./shared/LoadingIndicator\";\nexport {\n  PictureInPictureTrigger,\n  type PictureInPictureTriggerProps,\n} from \"./shared/PictureInPictureTrigger\";\nexport {\n  Portal,\n  type PortalProps,\n} from \"./shared/Portal\";\nexport {\n  SelectArrow,\n  SelectContent,\n  SelectGroup,\n  SelectIcon,\n  SelectItemIndicator,\n  SelectItemText,\n  SelectLabel,\n  SelectPortal,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n  SelectViewport,\n  type SelectArrowProps,\n  type SelectContentProps,\n  type SelectGroupProps,\n  type SelectIconProps,\n  type SelectItemIndicatorProps,\n  type SelectItemTextProps,\n  type SelectLabelProps,\n  type SelectPortalProps,\n  type SelectScrollDownButtonProps,\n  type SelectScrollUpButtonProps,\n  type SelectSeparatorProps,\n  type SelectTriggerProps,\n  type SelectValueProps,\n  type SelectViewportProps,\n} from \"./shared/Select\";\nexport {\n  Range,\n  Thumb,\n  Track,\n  type RangeProps,\n  type SliderProps,\n  type ThumbProps,\n  type TrackProps,\n} from \"./shared/Slider\";\nexport { Time, type TimeProps } from \"./shared/Time\";\nexport {\n  MediaProvider,\n  createMediaScope,\n  useMediaContext,\n  useStore,\n} from \"./shared/context\";\nexport type { MediaContextValue, MediaScopedProps } from \"./shared/context\";\n","\"use client\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport * as Radix from \"../shared/primitive\";\n\nimport React, { useEffect } from \"react\";\n\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useStore } from \"zustand\";\nimport { useShallow } from \"zustand/react/shallow\";\nimport { type MediaScopedProps, useMediaContext } from \"../shared/context\";\nimport { noPropagate } from \"../shared/utils\";\n\nconst CLIP_TRIGGER_NAME = \"ClipTrigger\";\n\ntype ClipTriggerElement = React.ElementRef<typeof Radix.Primitive.button>;\n\ninterface ClipTriggerProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.button> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n\n  onClip: (opts: {\n    /**\n     * Playback ID of the stream or asset to clip\n     */\n    playbackId: string;\n    /**\n     * Start time of the clip in milliseconds\n     */\n    startTime: number;\n    /**\n     * End time of the clip in milliseconds\n     */\n    endTime: number;\n  }) => Promise<void> | void;\n}\n\nconst ClipTrigger = React.forwardRef<ClipTriggerElement, ClipTriggerProps>(\n  (props: MediaScopedProps<ClipTriggerProps>, forwardedRef) => {\n    const { __scopeMedia, forceMount, onClip, ...clipTriggerProps } = props;\n\n    const context = useMediaContext(CLIP_TRIGGER_NAME, __scopeMedia);\n\n    const { clipLength, requestClip, playbackId, title } = useStore(\n      context.store,\n      useShallow(\n        ({ __controls, __controlsFunctions, aria, __initialProps }) => ({\n          requestClip: __controlsFunctions.requestClip,\n          playbackId: __controls.playbackId,\n          clipLength: __initialProps.clipLength,\n          title: aria.clip,\n        }),\n      ),\n    );\n\n    // biome-ignore lint/correctness/useExhaustiveDependencies: no dependencies\n    useEffect(() => {\n      if (playbackId) {\n        return context.store.subscribe(\n          (state) => state.__controls.requestedClipParams,\n          (params) => {\n            if (params) {\n              onClip({ playbackId, ...params });\n            }\n          },\n        );\n      }\n    }, [playbackId]);\n\n    return (\n      <Presence present={forceMount || Boolean(clipLength)}>\n        <Radix.Primitive.button\n          type=\"button\"\n          aria-label={title ?? undefined}\n          title={title ?? undefined}\n          disabled={!playbackId || !requestClip}\n          {...clipTriggerProps}\n          onClick={composeEventHandlers(\n            props.onClick,\n            noPropagate(requestClip),\n          )}\n          ref={forwardedRef}\n          data-livepeer-controls-clip-button=\"\"\n          data-visible={String(Boolean(clipLength))}\n        />\n      </Presence>\n    );\n  },\n);\n\nClipTrigger.displayName = CLIP_TRIGGER_NAME;\n\nexport { ClipTrigger };\nexport type { ClipTriggerProps };\n","import { Slot } from \"@radix-ui/react-slot\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nconst NODES = [\n  \"a\",\n  \"audio\",\n  \"button\",\n  \"div\",\n  \"form\",\n  \"h2\",\n  \"h3\",\n  \"img\",\n  \"input\",\n  \"label\",\n  \"li\",\n  \"nav\",\n  \"ol\",\n  \"p\",\n  \"span\",\n  \"svg\",\n  \"ul\",\n  \"video\",\n] as const;\n\n// Temporary while we await merge of this fix:\n// https://github.com/DefinitelyTyped/DefinitelyTyped/pull/55396\n// biome-ignore lint/suspicious/noExplicitAny: any\ntype PropsWithoutRef<P> = P extends any\n  ? \"ref\" extends keyof P\n    ? Pick<P, Exclude<keyof P, \"ref\">>\n    : P\n  : P;\ntype ComponentPropsWithoutRef<T extends React.ElementType> = PropsWithoutRef<\n  React.ComponentProps<T>\n>;\n\ntype Primitives = {\n  [E in (typeof NODES)[number]]: PrimitiveForwardRefComponent<E>;\n};\ntype PrimitivePropsWithRef<E extends React.ElementType> =\n  React.ComponentPropsWithRef<E> & {\n    asChild?: boolean;\n  };\n\ninterface PrimitiveForwardRefComponent<E extends React.ElementType>\n  extends React.ForwardRefExoticComponent<PrimitivePropsWithRef<E>> {}\n\n/* -------------------------------------------------------------------------------------------------\n * Primitive\n * -----------------------------------------------------------------------------------------------*/\n\nconst Primitive = NODES.reduce((primitive, node) => {\n  const Node = React.forwardRef(\n    // biome-ignore lint/suspicious/noExplicitAny: any\n    (props: PrimitivePropsWithRef<typeof node>, forwardedRef: any) => {\n      const { asChild, ...primitiveProps } = props;\n      // biome-ignore lint/suspicious/noExplicitAny: any\n      const Comp: any = asChild ? Slot : node;\n\n      React.useEffect(() => {\n        // biome-ignore lint/suspicious/noExplicitAny: any\n        (window as any)[Symbol.for(\"radix-ui\")] = true;\n      }, []);\n\n      return <Comp {...primitiveProps} ref={forwardedRef} />;\n    },\n  );\n\n  Node.displayName = `Primitive.${node}`;\n\n  // biome-ignore lint/performance/noAccumulatingSpread: no spread\n  return { ...primitive, [node]: Node };\n}, {} as Primitives);\n\n/* -------------------------------------------------------------------------------------------------\n * Utils\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * Flush custom event dispatch\n * https://github.com/radix-ui/primitives/pull/1378\n *\n * React batches *all* event handlers since version 18, this introduces certain considerations when using custom event types.\n *\n * Internally, React prioritizes events in the following order:\n *  - discrete\n *  - continuous\n *  - default\n *\n * https://github.com/facebook/react/blob/a8a4742f1c54493df00da648a3f9d26e3db9c8b5/packages/react-dom/src/events/ReactDOMEventListener.js#L294-L350\n *\n * `discrete` is an  important distinction as updates within these events are applied immediately.\n * React however, is not able to infer the priority of custom event types due to how they are detected internally.\n * Because of this, it's possible for updates from custom events to be unexpectedly batched when\n * dispatched by another `discrete` event.\n *\n * In order to ensure that updates from custom events are applied predictably, we need to manually flush the batch.\n * This utility should be used when dispatching a custom event from within another `discrete` event, this utility\n * is not necessary when dispatching known event types, or if dispatching a custom type inside a non-discrete event.\n * For example:\n *\n * dispatching a known click 👎\n * target.dispatchEvent(new Event(‘click’))\n *\n * dispatching a custom type within a non-discrete event 👎\n * onScroll={(event) => event.target.dispatchEvent(new CustomEvent(‘customType’))}\n *\n * dispatching a custom type within a `discrete` event 👍\n * onPointerDown={(event) => dispatchDiscreteCustomEvent(event.target, new CustomEvent(‘customType’))}\n *\n * Note: though React classifies `focus`, `focusin` and `focusout` events as `discrete`, it's  not recommended to use\n * this utility with them. This is because it's possible for those handlers to be called implicitly during render\n * e.g. when focus is within a component as it is unmounted, or when managing focus on mount.\n */\n\nfunction dispatchDiscreteCustomEvent<E extends CustomEvent>(\n  target: E[\"target\"],\n  event: E,\n) {\n  if (target) ReactDOM.flushSync(() => target.dispatchEvent(event));\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = Primitive;\n\nexport {\n  Primitive,\n  //\n  Root,\n  //\n  dispatchDiscreteCustomEvent,\n};\nexport type { ComponentPropsWithoutRef, PrimitivePropsWithRef };\n","import type { MediaControllerStore } from \"@livepeer/core/media\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useStore as useStoreZustand } from \"zustand\";\n\nimport type { Scope } from \"@radix-ui/react-context\";\n\nconst MEDIA_NAME = \"Media\";\n\n// biome-ignore lint/complexity/noBannedTypes: allow {}\ntype MediaScopedProps<P = {}> = P & { __scopeMedia?: Scope };\nconst [createMediaContext, createMediaScope] = createContextScope(MEDIA_NAME);\n\ntype MediaContextValue = {\n  store: MediaControllerStore;\n};\n\nconst [MediaProvider, useMediaContext] =\n  createMediaContext<MediaContextValue>(MEDIA_NAME);\n\nconst useStore = useStoreZustand;\n\nexport { MediaProvider, createMediaScope, useMediaContext, useStore };\nexport type { MediaContextValue, MediaScopedProps };\n","export const noPropagate =\n  <\n    E extends {\n      stopPropagation(): void;\n    },\n  >(\n    // biome-ignore lint/suspicious/noExplicitAny: any\n    cb: (...args: any) => any,\n  ) =>\n  (event: E) => {\n    event.stopPropagation();\n\n    return cb();\n  };\n","\"use client\";\n\nimport { Presence } from \"@radix-ui/react-presence\";\n\nimport React, { useEffect, useMemo } from \"react\";\n\nimport { useStore } from \"zustand\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useShallow } from \"zustand/react/shallow\";\nimport { type MediaScopedProps, useMediaContext } from \"../shared/context\";\nimport * as Radix from \"../shared/primitive\";\nimport { noPropagate } from \"../shared/utils\";\n\nconst CONTROLS_NAME = \"Controls\";\n\ntype ControlsElement = React.ElementRef<typeof Radix.Primitive.div>;\n\ninterface ControlsProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.div> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n\n  /**\n   * Auto-hide the controls after a mouse or touch interaction (in milliseconds).\n   *\n   * Defaults to 3000. Set to 0 for no hiding.\n   */\n  autoHide?: number;\n}\n\nconst Controls = React.forwardRef<ControlsElement, ControlsProps>(\n  (props: MediaScopedProps<ControlsProps>, forwardedRef) => {\n    const {\n      forceMount,\n      __scopeMedia,\n      onClick,\n      style,\n      autoHide,\n      ...controlsProps\n    } = props;\n\n    const context = useMediaContext(CONTROLS_NAME, __scopeMedia);\n\n    const { hidden, loading, togglePlay, error } = useStore(\n      context.store,\n      useShallow(({ hidden, loading, __controlsFunctions, error }) => ({\n        hidden,\n        loading,\n        togglePlay: __controlsFunctions.togglePlay,\n        error: error?.type ?? null,\n      })),\n    );\n\n    const shown = useMemo(\n      () => !hidden && !loading && !error,\n      [hidden, loading, error],\n    );\n\n    // biome-ignore lint/correctness/useExhaustiveDependencies: only set once to prevent flashing\n    useEffect(() => {\n      if (autoHide !== undefined) {\n        context.store.getState().__controlsFunctions.setAutohide(autoHide);\n      }\n    }, []);\n\n    return (\n      <Presence present={forceMount || shown}>\n        <Radix.Primitive.div\n          {...controlsProps}\n          ref={forwardedRef}\n          data-livepeer-controls=\"\"\n          data-visible={String(shown)}\n          onClick={composeEventHandlers(onClick, noPropagate(togglePlay))}\n          style={{\n            ...style,\n            // ensures controls expands in ratio\n            position: \"absolute\",\n            inset: 0,\n          }}\n        />\n      </Presence>\n    );\n  },\n);\n\nControls.displayName = CONTROLS_NAME;\n\nexport { Controls };\nexport type { ControlsProps };\n","\"use client\";\n\nimport React, { useMemo } from \"react\";\n\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useStore } from \"zustand\";\nimport { type MediaScopedProps, useMediaContext } from \"../shared/context\";\nimport * as Radix from \"../shared/primitive\";\n\nconst LIVE_INDICATOR_NAME = \"LiveIndicator\";\n\ntype LiveIndicatorElement = React.ElementRef<typeof Radix.Primitive.button>;\n\ninterface LiveIndicatorProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.button> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n  /** The matcher used to determine whether the element should be shown, given the `live` state (true for live streams, and false for assets). Defaults to `true`. */\n  matcher?: boolean | ((live: boolean) => boolean);\n}\n\nconst LiveIndicator = React.forwardRef<\n  LiveIndicatorElement,\n  LiveIndicatorProps\n>((props: MediaScopedProps<LiveIndicatorProps>, forwardedRef) => {\n  const {\n    __scopeMedia,\n    forceMount,\n    matcher = true,\n    ...liveIndicatorProps\n  } = props;\n\n  const context = useMediaContext(LIVE_INDICATOR_NAME, __scopeMedia);\n\n  const live = useStore(context.store, ({ live }) => live);\n\n  const isPresent = useMemo(\n    () => (typeof matcher === \"function\" ? matcher(live) : matcher === live),\n    [matcher, live],\n  );\n\n  return (\n    <Presence present={forceMount || isPresent}>\n      <Radix.Primitive.span\n        aria-label=\"live\"\n        {...liveIndicatorProps}\n        ref={forwardedRef}\n        data-livepeer-controls-live-indicator=\"\"\n        data-live={String(Boolean(live))}\n        data-visible={String(isPresent)}\n      />\n    </Presence>\n  );\n});\n\nLiveIndicator.displayName = LIVE_INDICATOR_NAME;\n\nexport { LiveIndicator };\nexport type { LiveIndicatorProps };\n","\"use client\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\n\nimport React from \"react\";\n\nimport { useStore } from \"zustand\";\nimport { type MediaScopedProps, useMediaContext } from \"../shared/context\";\n\nimport { useShallow } from \"zustand/react/shallow\";\nimport * as Radix from \"../shared/primitive\";\nimport { noPropagate } from \"../shared/utils\";\n\nconst MUTE_TRIGGER_NAME = \"MuteTrigger\";\n\ntype MuteTriggerElement = React.ElementRef<typeof Radix.Primitive.button>;\n\ninterface MuteTriggerProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.button> {}\n\nconst MuteTrigger = React.forwardRef<MuteTriggerElement, MuteTriggerProps>(\n  (props: MediaScopedProps<MuteTriggerProps>, forwardedRef) => {\n    const { __scopeMedia, ...playProps } = props;\n\n    const context = useMediaContext(MUTE_TRIGGER_NAME, __scopeMedia);\n\n    const { muted, toggleMute } = useStore(\n      context.store,\n      useShallow(({ __controls, __controlsFunctions }) => ({\n        muted: __controls.muted,\n        toggleMute: __controlsFunctions.requestToggleMute,\n      })),\n    );\n\n    const title = React.useMemo(\n      () => (muted ? \"Unmute (m)\" : \"Mute (m)\"),\n      [muted],\n    );\n\n    return (\n      <Radix.Primitive.button\n        type=\"button\"\n        aria-pressed={muted}\n        aria-label={title}\n        title={title}\n        {...playProps}\n        onClick={composeEventHandlers(props.onClick, noPropagate(toggleMute))}\n        ref={forwardedRef}\n        data-livepeer-controls-mute-trigger=\"\"\n        data-muted={String(muted)}\n      />\n    );\n  },\n);\n\nMuteTrigger.displayName = MUTE_TRIGGER_NAME;\n\nexport { MuteTrigger };\nexport type { MuteTriggerProps };\n","\"use client\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\n\nimport React, { useMemo } from \"react\";\n\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useStore } from \"zustand\";\nimport { type MediaScopedProps, useMediaContext } from \"../shared/context\";\n\nimport { useShallow } from \"zustand/react/shallow\";\nimport * as Radix from \"../shared/primitive\";\nimport { noPropagate } from \"../shared/utils\";\n\n/**\n * PlayPauseTrigger\n */\n\nconst PLAY_PAUSE_TRIGGER_NAME = \"PlayPauseTrigger\";\n\ntype PlayPauseTriggerElement = React.ElementRef<typeof Radix.Primitive.button>;\n\ninterface PlayPauseTriggerProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.button> {}\n\nconst PlayPauseTrigger = React.forwardRef<\n  PlayPauseTriggerElement,\n  PlayPauseTriggerProps\n>((props: MediaScopedProps<PlayPauseTriggerProps>, forwardedRef) => {\n  const { __scopeMedia, ...playProps } = props;\n\n  const context = useMediaContext(PLAY_PAUSE_TRIGGER_NAME, __scopeMedia);\n\n  const { playing, togglePlay, title } = useStore(\n    context.store,\n    useShallow(({ playing, __controlsFunctions, aria }) => ({\n      playing,\n      togglePlay: __controlsFunctions.togglePlay,\n      title: aria.playPause,\n    })),\n  );\n\n  return (\n    <Radix.Primitive.button\n      type=\"button\"\n      aria-pressed={playing}\n      aria-label={title ?? undefined}\n      title={title ?? undefined}\n      {...playProps}\n      onClick={composeEventHandlers(props.onClick, noPropagate(togglePlay))}\n      ref={forwardedRef}\n      data-livepeer-controls-play-pause-trigger=\"\"\n      data-playing={String(playing)}\n    />\n  );\n});\n\nPlayPauseTrigger.displayName = PLAY_PAUSE_TRIGGER_NAME;\n\n/**\n * PlayingIndicator\n */\n\nconst PLAYING_INDICATOR_NAME = \"PlayingIndicator\";\n\ntype PlayingIndicatorElement = React.ElementRef<typeof Radix.Primitive.div>;\n\ninterface PlayingIndicatorProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.div> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n  /** The matcher used to determine whether the element should be shown, given the playing state. Defaults to `true`, which equals playing. */\n  matcher?: boolean | ((state: boolean) => boolean);\n}\n\nconst PlayingIndicator = React.forwardRef<\n  PlayingIndicatorElement,\n  PlayingIndicatorProps\n>((props: MediaScopedProps<PlayingIndicatorProps>, forwardedRef) => {\n  const {\n    __scopeMedia,\n    forceMount,\n    matcher = true,\n    ...playPauseIndicatorProps\n  } = props;\n\n  const context = useMediaContext(PLAYING_INDICATOR_NAME, __scopeMedia);\n\n  const playing = useStore(\n    context.store,\n    useShallow(({ playing }) => playing),\n  );\n\n  const isPresent = useMemo(\n    () =>\n      typeof matcher === \"boolean\" ? matcher === playing : matcher(playing),\n    [playing, matcher],\n  );\n\n  return (\n    <Presence present={forceMount || isPresent}>\n      <Radix.Primitive.div\n        {...playPauseIndicatorProps}\n        ref={forwardedRef}\n        data-livepeer-controls-play-pause-indicator=\"\"\n        data-playing={String(playing)}\n        data-visible={String(isPresent)}\n      />\n    </Presence>\n  );\n});\n\nPlayingIndicator.displayName = PLAYING_INDICATOR_NAME;\n\nexport { PlayPauseTrigger, PlayingIndicator };\nexport type { PlayPauseTriggerProps, PlayingIndicatorProps };\n","\"use client\";\n\nimport { getDeviceInfo } from \"@livepeer/core-web/browser\";\n\nimport React, { type PropsWithChildren, useEffect, useRef } from \"react\";\n\nimport {\n  type InitialProps,\n  type Src,\n  addMediaMetricsToStore,\n  createControllerStore,\n} from \"@livepeer/core/media\";\nimport { createStorage, noopStorage } from \"@livepeer/core/storage\";\nimport { version } from \"@livepeer/core/version\";\nimport { MediaProvider, type MediaScopedProps } from \"../shared/context\";\n\ninterface PlayerProps\n  extends PropsWithChildren<\n    Omit<Partial<InitialProps>, \"creatorId\" | \"hotkeys\">\n  > {\n  /**\n   * The source for the Player. The `Src[]` can be created from calling `getSrc`\n   * with Livepeer playback info, Cloudflare stream data, Mux URLs, `string[]`, or `string`.\n   */\n  src: Src[] | null;\n\n  /**\n   * The aspect ratio of the media. Defaults to 16 / 9.\n   * This significantly improves cumulative layout shift.\n   * Set to `null` to render a plain div primitive.\n   *\n   * @see {@link https://web.dev/cls/}\n   */\n  aspectRatio?: number | null;\n\n  /**\n   * Whether hotkeys are enabled. Defaults to `true`. Allows users to use keyboard shortcuts for player control.\n   *\n   * This is highly recommended to adhere to ARIA guidelines.\n   */\n  hotkeys?: boolean;\n}\n\nconst Player = React.memo((props: MediaScopedProps<PlayerProps>) => {\n  const {\n    aspectRatio = 16 / 9,\n    src,\n    children,\n    jwt,\n    accessKey,\n    storage,\n    ...rest\n  } = props;\n\n  const store = useRef(\n    createControllerStore({\n      device: getDeviceInfo(version.react),\n      storage: createStorage(\n        storage !== null && typeof window !== \"undefined\"\n          ? {\n              storage: window.localStorage,\n            }\n          : {\n              storage: noopStorage,\n            },\n      ),\n      src,\n      initialProps: {\n        aspectRatio,\n        jwt,\n        accessKey,\n        ...rest,\n      },\n    }),\n  );\n\n  useEffect(() => {\n    if (jwt) {\n      store?.current?.store.setState((prev) => ({\n        __initialProps: {\n          ...prev.__initialProps,\n          jwt,\n        },\n      }));\n    }\n  }, [jwt]);\n\n  useEffect(() => {\n    if (accessKey) {\n      store?.current?.store.setState((prev) => ({\n        __initialProps: {\n          ...prev.__initialProps,\n          accessKey,\n        },\n      }));\n    }\n  }, [accessKey]);\n\n  useEffect(() => {\n    return () => {\n      store?.current?.destroy?.();\n    };\n  }, []);\n\n  useEffect(() => {\n    const metrics = addMediaMetricsToStore(store.current.store);\n\n    return () => {\n      metrics.destroy();\n    };\n  }, []);\n\n  return (\n    <MediaProvider store={store.current.store} scope={props.__scopeMedia}>\n      {children}\n    </MediaProvider>\n  );\n});\n\nPlayer.displayName = \"Player\";\n\nconst Root = Player;\n\nexport { Root };\nexport type { PlayerProps };\n","\"use client\";\n\nimport React from \"react\";\n\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useStore } from \"zustand\";\nimport { type MediaScopedProps, useMediaContext } from \"../shared/context\";\nimport * as Radix from \"../shared/primitive\";\n\nconst POSTER_NAME = \"Poster\";\n\ntype PosterElement = React.ElementRef<typeof Radix.Primitive.img>;\n\ninterface PosterProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.img> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst Poster = React.forwardRef<PosterElement, PosterProps>(\n  (props: MediaScopedProps<PosterProps>, forwardedRef) => {\n    const { __scopeMedia, forceMount, src, ...posterProps } = props;\n\n    const context = useMediaContext(POSTER_NAME, __scopeMedia);\n\n    const poster = useStore(context.store, ({ poster }) => poster);\n\n    return (\n      <Presence present={forceMount || Boolean(src || poster)}>\n        <Radix.Primitive.img\n          alt=\"Poster for video\"\n          aria-hidden=\"true\"\n          {...posterProps}\n          src={src || poster || undefined}\n          ref={forwardedRef}\n          data-livepeer-poster=\"\"\n          data-visible={String(Boolean(src || poster))}\n        />\n      </Presence>\n    );\n  },\n);\n\nPoster.displayName = POSTER_NAME;\n\nexport { Poster };\nexport type { PosterProps };\n","\"use client\";\n\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\n\nconst SelectRoot = SelectPrimitive.Root;\nconst SelectTrigger = SelectPrimitive.SelectTrigger;\nconst SelectValue = SelectPrimitive.SelectValue;\nconst SelectIcon = SelectPrimitive.SelectIcon;\nconst SelectPortal = SelectPrimitive.SelectPortal;\nconst SelectContent = SelectPrimitive.SelectContent;\nconst SelectViewport = SelectPrimitive.SelectViewport;\nconst SelectGroup = SelectPrimitive.SelectGroup;\nconst SelectLabel = SelectPrimitive.SelectLabel;\nconst SelectItem = SelectPrimitive.SelectItem;\nconst SelectItemText = SelectPrimitive.SelectItemText;\nconst SelectItemIndicator = SelectPrimitive.SelectItemIndicator;\nconst SelectScrollUpButton = SelectPrimitive.SelectScrollUpButton;\nconst SelectScrollDownButton = SelectPrimitive.SelectScrollDownButton;\nconst SelectSeparator = SelectPrimitive.SelectSeparator;\nconst SelectArrow = SelectPrimitive.SelectArrow;\n\ntype SelectProps = SelectPrimitive.SelectProps;\ntype SelectTriggerProps = SelectPrimitive.SelectTriggerProps;\ntype SelectValueProps = SelectPrimitive.SelectValueProps;\ntype SelectIconProps = SelectPrimitive.SelectIconProps;\ntype SelectPortalProps = SelectPrimitive.SelectPortalProps;\ntype SelectContentProps = SelectPrimitive.SelectContentProps;\ntype SelectViewportProps = SelectPrimitive.SelectViewportProps;\ntype SelectGroupProps = SelectPrimitive.SelectGroupProps;\ntype SelectLabelProps = SelectPrimitive.SelectLabelProps;\ntype SelectItemProps = SelectPrimitive.SelectItemProps;\ntype SelectItemTextProps = SelectPrimitive.SelectItemTextProps;\ntype SelectItemIndicatorProps = SelectPrimitive.SelectItemIndicatorProps;\ntype SelectScrollUpButtonProps = SelectPrimitive.SelectScrollUpButtonProps;\ntype SelectScrollDownButtonProps = SelectPrimitive.SelectScrollDownButtonProps;\ntype SelectSeparatorProps = SelectPrimitive.SelectSeparatorProps;\ntype SelectArrowProps = SelectPrimitive.SelectArrowProps;\n\nexport {\n  SelectArrow,\n  SelectContent,\n  SelectGroup,\n  SelectIcon,\n  SelectItem,\n  SelectItemIndicator,\n  SelectItemText,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n  SelectViewport,\n};\n\nexport type {\n  SelectArrowProps,\n  SelectContentProps,\n  SelectGroupProps,\n  SelectIconProps,\n  SelectItemIndicatorProps,\n  SelectItemProps,\n  SelectItemTextProps,\n  SelectLabelProps,\n  SelectPortalProps,\n  SelectProps,\n  SelectScrollDownButtonProps,\n  SelectScrollUpButtonProps,\n  SelectSeparatorProps,\n  SelectTriggerProps,\n  SelectValueProps,\n  SelectViewportProps,\n};\n","\"use client\";\n\nimport * as SelectPrimitive from \"../shared/Select\";\n\nimport React from \"react\";\n\nimport { useStore } from \"zustand\";\nimport { type MediaScopedProps, useMediaContext } from \"../shared/context\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useShallow } from \"zustand/react/shallow\";\n\nimport type { PlaybackRate } from \"@livepeer/core/media\";\nimport type * as Radix from \"../shared/primitive\";\n\n/**\n * RateSelect\n */\n\nconst RATE_SELECT_NAME = \"RateSelect\";\n\ninterface RateSelectProps\n  extends Radix.ComponentPropsWithoutRef<typeof SelectPrimitive.SelectRoot> {}\n\nconst RateSelect = (props: MediaScopedProps<RateSelectProps>) => {\n  const { __scopeMedia, defaultValue, ...rateSelectProps } = props;\n\n  const context = useMediaContext(RATE_SELECT_NAME, __scopeMedia);\n\n  const { playbackRate, setPlaybackRate } = useStore(\n    context.store,\n    useShallow(({ playbackRate, __controlsFunctions }) => ({\n      playbackRate,\n      setPlaybackRate: __controlsFunctions.setPlaybackRate,\n    })),\n  );\n\n  return (\n    <SelectPrimitive.SelectRoot\n      {...rateSelectProps}\n      value={playbackRate === \"constant\" ? \"constant\" : playbackRate.toFixed(2)}\n      onValueChange={composeEventHandlers(props.onValueChange, setPlaybackRate)}\n      data-livepeer-rate-select=\"\"\n      data-rate={String(playbackRate)}\n    />\n  );\n};\n\nRateSelect.displayName = RATE_SELECT_NAME;\n\n/**\n * RateSelectItem\n */\n\nconst RATE_SELECT_ITEM_NAME = \"RateSelectItem\";\n\ntype RateSelectItemElement = React.ElementRef<\n  typeof SelectPrimitive.SelectItem\n>;\n\ninterface RateSelectItemProps\n  extends Omit<\n    Radix.ComponentPropsWithoutRef<typeof SelectPrimitive.SelectItem>,\n    \"value\"\n  > {\n  /**\n   * The numerical value of the rate select item. This must be provided and must be a number or `constant`,\n   * which indicates a constant playback rate.\n   */\n  value: PlaybackRate;\n}\n\nconst RateSelectItem = React.forwardRef<\n  RateSelectItemElement,\n  RateSelectItemProps\n>((props: MediaScopedProps<RateSelectItemProps>, forwardedRef) => {\n  const { __scopeMedia, value, ...rateSelectItemProps } = props;\n\n  return (\n    <SelectPrimitive.SelectItem\n      {...rateSelectItemProps}\n      ref={forwardedRef}\n      value={Number(value).toFixed(2)}\n      data-livepeer-rate-select-item=\"\"\n    />\n  );\n});\n\nRateSelectItem.displayName = RATE_SELECT_ITEM_NAME;\n\nexport { RateSelect, RateSelectItem };\nexport type { RateSelectItemProps, RateSelectProps };\n","\"use client\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport * as SliderPrimitive from \"../shared/Slider\";\n\nimport React from \"react\";\n\nimport { useStore } from \"zustand\";\nimport { useShallow } from \"zustand/react/shallow\";\n\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { type MediaScopedProps, useMediaContext } from \"../shared/context\";\nimport type * as Radix from \"../shared/primitive\";\nimport { noPropagate } from \"../shared/utils\";\n\nconst SEEK_NAME = \"Seek\";\n\ntype SeekElement = React.ElementRef<typeof Radix.Primitive.button>;\n\ninterface SeekProps\n  extends Radix.ComponentPropsWithoutRef<typeof SliderPrimitive.Root> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst Seek = React.forwardRef<SeekElement, SeekProps>(\n  (props: MediaScopedProps<SeekProps>, forwardedRef) => {\n    const { __scopeMedia, forceMount, style, ...seekProps } = props;\n\n    const context = useMediaContext(SEEK_NAME, __scopeMedia);\n\n    const {\n      ariaProgress,\n      duration,\n      buffered,\n      bufferedPercent,\n      progress,\n      live,\n      seek,\n    } = useStore(\n      context.store,\n      useShallow(\n        ({\n          aria,\n          duration,\n          buffered,\n          bufferedPercent,\n          progress,\n          live,\n          __controlsFunctions,\n        }) => ({\n          ariaProgress: aria.progress,\n          duration,\n          buffered,\n          bufferedPercent,\n          progress,\n          live,\n          seek: __controlsFunctions.requestSeek,\n        }),\n      ),\n    );\n\n    const onValueChange = React.useCallback(\n      ([value]: number[]) => seek(value),\n      [seek],\n    );\n    const onValueCommit = React.useCallback(\n      ([value]: number[]) => seek(value),\n      [seek],\n    );\n\n    return (\n      <Presence present={forceMount || !live}>\n        <SliderPrimitive.Root\n          aria-label={live ? \"Live Seek Slider\" : \"Video Seek Slider\"}\n          aria-valuetext={ariaProgress ?? undefined}\n          step={0.1}\n          max={duration}\n          value={[progress]}\n          role=\"slider\"\n          {...seekProps}\n          onValueChange={composeEventHandlers(\n            props.onValueChange,\n            onValueChange,\n          )}\n          onValueCommit={composeEventHandlers(\n            props.onValueCommit,\n            onValueCommit,\n          )}\n          onClick={noPropagate(() => {})}\n          ref={forwardedRef}\n          data-livepeer-controls-seek=\"\"\n          data-duration={duration}\n          data-progress={progress}\n          data-live={String(live)}\n          data-buffered={buffered}\n          data-visible={String(!live)}\n          style={{\n            // biome-ignore lint/suspicious/noExplicitAny: player container css var\n            [\"--livepeer-player-buffering-width\" as any]: `${\n              bufferedPercent ?? 0\n            }%`,\n            ...style,\n          }}\n        />\n      </Presence>\n    );\n  },\n);\n\nSeek.displayName = SEEK_NAME;\n\nconst SEEK_BUFFER_NAME = \"SeekBuffer\";\n\ntype SeekBufferElement = React.ElementRef<typeof SliderPrimitive.Track>;\n\ninterface SeekBufferProps\n  extends Radix.ComponentPropsWithoutRef<typeof SliderPrimitive.Track> {}\n\nconst SeekBuffer = React.forwardRef<SeekBufferElement, SeekBufferProps>(\n  (props: MediaScopedProps<SeekBufferProps>, forwardedRef) => {\n    const { __scopeMedia, style, ...bufferProps } = props;\n\n    const context = useMediaContext(SEEK_BUFFER_NAME, __scopeMedia);\n\n    const { bufferedPercent, buffered } = useStore(\n      context.store,\n      useShallow(({ bufferedPercent, buffered }) => ({\n        buffered,\n        bufferedPercent,\n      })),\n    );\n\n    return (\n      <SliderPrimitive.Track\n        {...bufferProps}\n        ref={forwardedRef}\n        style={{\n          left: 0,\n          right: `${100 - (bufferedPercent ?? 0)}%`,\n          ...style,\n        }}\n        data-livepeer-controls-seek-buffer=\"\"\n        data-buffered={buffered}\n      />\n    );\n  },\n);\n\nSeekBuffer.displayName = SEEK_BUFFER_NAME;\n\nexport { Seek, SeekBuffer };\nexport type { SeekBufferProps, SeekProps };\n","\"use client\";\n\nimport * as SliderPrimitive from \"@radix-ui/react-slider\";\n\ntype SliderProps = SliderPrimitive.SliderProps;\nconst Root = SliderPrimitive.Root;\ntype TrackProps = SliderPrimitive.SliderTrackProps;\nconst Track = SliderPrimitive.Track;\ntype RangeProps = SliderPrimitive.SliderRangeProps;\nconst Range = SliderPrimitive.Range;\ntype ThumbProps = SliderPrimitive.SliderThumbProps;\nconst Thumb = SliderPrimitive.Thumb;\n\nexport { Range, Root, Thumb, Track };\nexport type { RangeProps, SliderProps, ThumbProps, TrackProps };\n","\"use client\";\n\nimport React, { useEffect } from \"react\";\nimport { useStore } from \"zustand\";\n\nimport { type HlsConfig, addEventListeners } from \"@livepeer/core-web/browser\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { type MediaScopedProps, useMediaContext } from \"../shared/context\";\n\nimport { useShallow } from \"zustand/react/shallow\";\nimport * as Radix from \"../shared/primitive\";\n\nconst VIDEO_NAME = \"Video\";\n\ntype OmittedProps = \"src\" | \"poster\" | \"autoPlay\" | \"preload\";\n\ntype VideoElement = React.ElementRef<typeof Radix.Primitive.video>;\n\ninterface VideoProps\n  extends Omit<\n    Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.video>,\n    OmittedProps\n  > {\n  /**\n   * Controls the poster source, which by default uses the thumbnail from the Src input.\n   *\n   * Set to null to disable the default poster image from the Src.\n   */\n  poster?: string | null;\n\n  /**\n   * Configures the HLS.js options, for advanced usage of the Player.\n   */\n  hlsConfig?: HlsConfig;\n}\n\nconst Video = React.forwardRef<VideoElement, VideoProps>(\n  (props: MediaScopedProps<VideoProps>, forwardedRef) => {\n    const { __scopeMedia, style, poster, hlsConfig, ...videoProps } = props;\n\n    const context = useMediaContext(VIDEO_NAME, __scopeMedia);\n\n    const ref = React.useRef<VideoElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n\n    const {\n      currentSource,\n      setMounted,\n      autoPlay,\n      preload,\n      thumbnailPoster,\n      volume,\n      requestToggleMute,\n    } = useStore(\n      context.store,\n      useShallow(\n        ({\n          __controlsFunctions,\n          __initialProps,\n          currentSource,\n          live,\n          poster,\n          volume,\n        }) => ({\n          autoPlay: __initialProps.autoPlay,\n          currentSource,\n          live,\n          preload: __initialProps.preload,\n          setMounted: __controlsFunctions.setMounted,\n          thumbnailPoster: poster,\n          volume,\n          requestToggleMute: __controlsFunctions.requestToggleMute,\n        }),\n      ),\n    );\n\n    useEffect(() => {\n      if (ref.current) {\n        const { destroy } = addEventListeners(ref.current, context.store);\n\n        return destroy;\n      }\n    }, [context?.store]);\n\n    // biome-ignore lint/correctness/useExhaustiveDependencies: only set once to prevent flashing\n    useEffect(() => {\n      if (hlsConfig) {\n        context.store.getState().__controlsFunctions.setHlsConfig(hlsConfig);\n      }\n    }, []);\n\n    useEffect(() => {\n      // we run this on mount to initialize playback\n      setMounted();\n    }, [setMounted]);\n\n    useEffect(() => {\n      if (typeof videoProps.muted !== \"undefined\") {\n        requestToggleMute(videoProps.muted);\n      }\n    }, [videoProps.muted, requestToggleMute]);\n\n    return (\n      <Radix.Primitive.video\n        playsInline\n        poster={\n          poster === null ? undefined : poster ?? thumbnailPoster ?? undefined\n        }\n        muted={volume === 0}\n        {...videoProps}\n        autoPlay={autoPlay}\n        preload={preload}\n        ref={composedRefs}\n        data-livepeer-video=\"\"\n        data-livepeer-source-type={currentSource?.type ?? \"none\"}\n        style={{\n          ...style,\n          // ensures video expands in ratio\n          position: \"absolute\",\n          inset: 0,\n        }}\n      />\n    );\n  },\n);\n\nVideo.displayName = VIDEO_NAME;\n\nexport { Video };\nexport type { VideoProps };\n","\"use client\";\n\nimport * as SelectPrimitive from \"../shared/Select\";\n\nimport React from \"react\";\n\nimport { useStore } from \"zustand\";\nimport { type MediaScopedProps, useMediaContext } from \"../shared/context\";\n\nimport type { VideoQuality } from \"@livepeer/core/media\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useShallow } from \"zustand/react/shallow\";\nimport type * as Radix from \"../shared/primitive\";\n\n/**\n * VideoQualitySelect\n */\n\nconst VIDEO_QUALITY_SELECT_NAME = \"VideoQualitySelect\";\n\ninterface VideoQualitySelectProps\n  extends Radix.ComponentPropsWithoutRef<typeof SelectPrimitive.SelectRoot> {}\n\nconst VideoQualitySelect = (\n  props: MediaScopedProps<VideoQualitySelectProps>,\n) => {\n  const { __scopeMedia, defaultValue, ...videoQualitySelectProps } = props;\n\n  const context = useMediaContext(VIDEO_QUALITY_SELECT_NAME, __scopeMedia);\n\n  const { videoQuality, setVideoQuality } = useStore(\n    context.store,\n    useShallow(({ videoQuality, __controlsFunctions }) => ({\n      videoQuality,\n      setVideoQuality: __controlsFunctions.setVideoQuality,\n    })),\n  );\n\n  return (\n    <SelectPrimitive.SelectRoot\n      {...videoQualitySelectProps}\n      value={videoQuality}\n      onValueChange={composeEventHandlers(props.onValueChange, setVideoQuality)}\n      data-livepeer-quality-select=\"\"\n      data-video-quality={String(videoQuality)}\n    />\n  );\n};\n\nVideoQualitySelect.displayName = VIDEO_QUALITY_SELECT_NAME;\n\n/**\n * VideoQualitySelectItem\n */\n\nconst VIDEO_QUALITY_SELECT_ITEM_NAME = \"VideoQualitySelectItem\";\n\ntype VideoQualitySelectItemElement = React.ElementRef<\n  typeof SelectPrimitive.SelectItem\n>;\n\ninterface VideoQualitySelectItemProps\n  extends Omit<\n    Radix.ComponentPropsWithoutRef<typeof SelectPrimitive.SelectItem>,\n    \"value\"\n  > {\n  /**\n   * The numerical value of the quality select item. This must be provided.\n   */\n  value: VideoQuality;\n}\n\nconst VideoQualitySelectItem = React.forwardRef<\n  VideoQualitySelectItemElement,\n  VideoQualitySelectItemProps\n>((props: MediaScopedProps<VideoQualitySelectItemProps>, forwardedRef) => {\n  const { __scopeMedia, ...videoQualitySelectItemProps } = props;\n\n  return (\n    <SelectPrimitive.SelectItem\n      {...videoQualitySelectItemProps}\n      ref={forwardedRef}\n      data-livepeer-quality-select-item=\"\"\n    />\n  );\n});\n\nVideoQualitySelectItem.displayName = VIDEO_QUALITY_SELECT_ITEM_NAME;\n\nexport { VideoQualitySelect, VideoQualitySelectItem };\nexport type { VideoQualitySelectItemProps, VideoQualitySelectProps };\n","\"use client\";\n\nimport React, { useEffect, useMemo } from \"react\";\n\nimport { useStore } from \"zustand\";\nimport { type MediaScopedProps, useMediaContext } from \"../shared/context\";\n\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useShallow } from \"zustand/react/shallow\";\nimport * as Radix from \"../shared/primitive\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport * as SliderPrimitive from \"../shared/Slider\";\n\nimport { warn } from \"@livepeer/core/utils\";\nimport { noPropagate } from \"../shared/utils\";\n\n/**\n * Volume\n */\n\nconst VOLUME_NAME = \"Volume\";\n\ntype VolumeElement = React.ElementRef<typeof Radix.Primitive.button>;\n\ninterface VolumeProps\n  extends Radix.ComponentPropsWithoutRef<typeof SliderPrimitive.Root> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst Volume = React.forwardRef<VolumeElement, VolumeProps>(\n  (props: MediaScopedProps<VolumeProps>, forwardedRef) => {\n    const { __scopeMedia, forceMount, ...volumeProps } = props;\n\n    const context = useMediaContext(VOLUME_NAME, __scopeMedia);\n\n    const { volume, requestVolume, isVolumeChangeSupported } = useStore(\n      context.store,\n      useShallow(({ volume, __controlsFunctions, __device }) => ({\n        volume,\n        requestVolume: __controlsFunctions.requestVolume,\n        isVolumeChangeSupported: __device.isVolumeChangeSupported,\n      })),\n    );\n\n    const onValueChange = React.useCallback(\n      ([value]: number[]) => requestVolume(value),\n      [requestVolume],\n    );\n    const onValueCommit = React.useCallback(\n      ([value]: number[]) => requestVolume(value),\n      [requestVolume],\n    );\n\n    return (\n      <Presence present={forceMount || isVolumeChangeSupported}>\n        <SliderPrimitive.Root\n          aria-label=\"Volume Slider\"\n          step={0.01}\n          max={1}\n          value={[volume]}\n          {...volumeProps}\n          onClick={noPropagate(() => {})}\n          onValueChange={composeEventHandlers(\n            props.onValueChange,\n            onValueChange,\n          )}\n          onValueCommit={composeEventHandlers(\n            props.onValueCommit,\n            onValueCommit,\n          )}\n          ref={forwardedRef}\n          data-livepeer-controls-volume=\"\"\n          data-livepeer-muted={String(volume === 0)}\n          data-livepeer-volume={String((100 * volume).toFixed(0))}\n          data-visible={String(Boolean(isVolumeChangeSupported))}\n        />\n      </Presence>\n    );\n  },\n);\n\nVolume.displayName = VOLUME_NAME;\n\n/**\n * VolumeIndicator\n */\n\nconst VOLUME_INDICATOR_NAME = \"VolumeIndicator\";\n\ntype VolumeIndicatorElement = React.ElementRef<typeof Radix.Primitive.div>;\n\ninterface VolumeIndicatorProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.div> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n  /** The matcher used to determine whether the element should be shown, given the volume. Defaults to match `false`, which is muted. */\n  matcher?: boolean | ((volume: number) => boolean);\n}\n\nconst VolumeIndicator = React.forwardRef<\n  VolumeIndicatorElement,\n  VolumeIndicatorProps\n>((props: MediaScopedProps<VolumeIndicatorProps>, forwardedRef) => {\n  const {\n    __scopeMedia,\n    forceMount,\n    matcher = false,\n    ...volumeIndicatorProps\n  } = props;\n\n  const context = useMediaContext(VOLUME_INDICATOR_NAME, __scopeMedia);\n\n  const { volume, muted, isVolumeChangeSupported } = useStore(\n    context.store,\n    useShallow(({ volume, __device, __controls }) => ({\n      volume,\n      muted: __controls.muted,\n      isVolumeChangeSupported: __device.isVolumeChangeSupported,\n    })),\n  );\n\n  const isPresent = useMemo(\n    () =>\n      matcher !== undefined\n        ? typeof matcher === \"boolean\"\n          ? matcher\n            ? !muted\n            : muted\n          : matcher(volume)\n        : muted,\n    [volume, matcher, muted],\n  );\n\n  useEffect(() => {\n    if (isVolumeChangeSupported && typeof matcher !== \"boolean\") {\n      warn(\"Volume change is not supported on this device.\");\n    }\n  }, [isVolumeChangeSupported, matcher]);\n\n  return (\n    <Presence present={forceMount || isPresent}>\n      <Radix.Primitive.div\n        {...volumeIndicatorProps}\n        ref={forwardedRef}\n        data-livepeer-muted={String(muted)}\n        data-livepeer-volume={String((100 * volume).toFixed(0))}\n        data-livepeer-controls-volume-indicator=\"\"\n        data-visible={String(isPresent)}\n      />\n    </Presence>\n  );\n});\n\nVolumeIndicator.displayName = VOLUME_INDICATOR_NAME;\n\nexport { Volume, VolumeIndicator };\nexport type { VolumeIndicatorProps, VolumeProps };\n","\"use client\";\n\nimport React from \"react\";\n\nimport * as RadixAspectRatio from \"@radix-ui/react-aspect-ratio\";\nimport { useStore } from \"zustand\";\nimport { useShallow } from \"zustand/react/shallow\";\nimport { type MediaScopedProps, useMediaContext } from \"./context\";\nimport * as Radix from \"./primitive\";\n\nconst CONTAINER_NAME = \"Container\";\n\ntype ContainerElement = React.ElementRef<typeof Radix.Primitive.div>;\ntype ContainerProps = Radix.ComponentPropsWithoutRef<\n  typeof Radix.Primitive.div\n>;\n\nconst Container = React.memo(\n  React.forwardRef<ContainerElement, MediaScopedProps<ContainerProps>>(\n    (props, forwardedRef) => {\n      const { __scopeMedia, ...aspectRatioProps } = props;\n\n      const context = useMediaContext(CONTAINER_NAME, __scopeMedia);\n\n      const {\n        aspectRatio,\n        fullscreen,\n        playing,\n        canPlay,\n        rate,\n        error,\n        live,\n        hasPlayed,\n        hidden,\n        pictureInPicture,\n        loading,\n        videoQuality,\n      } = useStore(\n        context.store,\n        useShallow(\n          ({\n            __initialProps,\n            fullscreen,\n            playing,\n            canPlay,\n            playbackRate,\n            error,\n            live,\n            hasPlayed,\n            hidden,\n            pictureInPicture,\n            loading,\n            videoQuality,\n          }) => ({\n            aspectRatio: __initialProps.aspectRatio,\n            fullscreen,\n            playing,\n            canPlay,\n            error: Boolean(error),\n            rate:\n              playbackRate === \"constant\"\n                ? \"constant\"\n                : playbackRate > 1\n                  ? \"fast\"\n                  : playbackRate < 1\n                    ? \"slow\"\n                    : \"normal\",\n            live,\n            hasPlayed,\n            hidden,\n            pictureInPicture,\n            loading,\n            videoQuality,\n          }),\n        ),\n      );\n\n      return aspectRatio ? (\n        <RadixAspectRatio.Root\n          ratio={aspectRatio}\n          {...aspectRatioProps}\n          ref={forwardedRef}\n          data-livepeer-aspect-ratio=\"\"\n          data-fullscreen={String(fullscreen)}\n          data-playing={String(playing)}\n          data-can-play={String(canPlay)}\n          data-playback-rate={rate}\n          data-error={String(error)}\n          data-loading={String(loading)}\n          data-live={String(live)}\n          data-has-played={String(hasPlayed)}\n          data-controls-hidden={String(hidden)}\n          data-picture-in-picture={String(pictureInPicture)}\n          data-video-quality={String(videoQuality)}\n        />\n      ) : (\n        <Radix.Primitive.div\n          {...aspectRatioProps}\n          ref={forwardedRef}\n          data-livepeer-wrapper=\"\"\n          data-fullscreen={String(fullscreen)}\n          data-playing={String(playing)}\n          data-can-play={String(canPlay)}\n          data-playback-rate={rate}\n          data-error={String(error)}\n          data-loading={String(loading)}\n          data-live={String(live)}\n          data-has-played={String(hasPlayed)}\n          data-controls-hidden={String(hidden)}\n          data-picture-in-picture={String(pictureInPicture)}\n          data-video-quality={String(videoQuality)}\n        />\n      );\n    },\n  ),\n);\n\nContainer.displayName = CONTAINER_NAME;\n\nexport { Container, type ContainerProps };\n","\"use client\";\n\nimport React, { useMemo } from \"react\";\n\nimport type { PlaybackError } from \"@livepeer/core/media\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useStore } from \"zustand\";\nimport { type MediaScopedProps, useMediaContext } from \"./context\";\nimport * as Radix from \"./primitive\";\n\nconst ERROR_INDICATOR_NAME = \"ErrorIndicator\";\n\ntype ErrorIndicatorElement = React.ElementRef<typeof Radix.Primitive.div>;\n\ninterface ErrorIndicatorProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.div> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n  /**\n   * The matcher used to determine whether the element should be shown, given the error state.\n   *\n   * Passing `all` means it will display on all errors, and `not-permissions` is only errors\n   * that are not failed camera, audio, or display permissions requests.\n   */\n  matcher:\n    | \"all\"\n    | \"not-permissions\"\n    | PlaybackError[\"type\"]\n    | ((state: PlaybackError[\"type\"]) => boolean);\n}\n\nconst ErrorIndicator = React.forwardRef<\n  ErrorIndicatorElement,\n  ErrorIndicatorProps\n>((props: MediaScopedProps<ErrorIndicatorProps>, forwardedRef) => {\n  const { __scopeMedia, forceMount, matcher, ...offlineErrorProps } = props;\n\n  const context = useMediaContext(ERROR_INDICATOR_NAME, __scopeMedia);\n\n  const error = useStore(context.store, ({ error }) => error);\n\n  const isPresent = useMemo(\n    () =>\n      error\n        ? typeof matcher === \"string\"\n          ? matcher === \"all\"\n            ? true\n            : matcher === \"not-permissions\"\n              ? error.type !== \"permissions\"\n              : matcher === error.type\n          : matcher(error.type)\n        : false,\n    [error, matcher],\n  );\n\n  return (\n    <Presence present={forceMount || isPresent}>\n      <Radix.Primitive.div\n        {...offlineErrorProps}\n        ref={forwardedRef}\n        data-livepeer-error-indicator=\"\"\n        data-error-state={String(Boolean(error))}\n        data-error-type={error?.type ?? \"none\"}\n        data-visible={String(isPresent)}\n      />\n    </Presence>\n  );\n});\n\nErrorIndicator.displayName = ERROR_INDICATOR_NAME;\n\nexport { ErrorIndicator };\nexport type { ErrorIndicatorProps };\n","\"use client\";\n\nimport React, { useMemo } from \"react\";\n\nimport { useStore } from \"zustand\";\nimport { type MediaScopedProps, useMediaContext } from \"./context\";\n\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useShallow } from \"zustand/react/shallow\";\nimport * as Radix from \"./primitive\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\n\nimport { noPropagate } from \"./utils\";\n\n/**\n * FullscreenIndicator\n */\n\nconst FULLSCREEN_INDICATOR_NAME = \"FullscreenIndicator\";\n\ntype FullscreenIndicatorElement = React.ElementRef<typeof Radix.Primitive.div>;\n\ninterface FullscreenIndicatorProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.div> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n  /** The matcher used to determine whether the element should be shown, given the fullscreen state. Defaults to `true`. */\n  matcher?: boolean | ((fullscreen: boolean) => boolean);\n}\n\nconst FullscreenIndicator = React.forwardRef<\n  FullscreenIndicatorElement,\n  FullscreenIndicatorProps\n>((props: MediaScopedProps<FullscreenIndicatorProps>, forwardedRef) => {\n  const {\n    __scopeMedia,\n    forceMount,\n    matcher = true,\n    ...fullscreenIndicatorProps\n  } = props;\n\n  const context = useMediaContext(FULLSCREEN_INDICATOR_NAME, __scopeMedia);\n\n  const fullscreen = useStore(\n    context.store,\n    useShallow(({ fullscreen }) => fullscreen),\n  );\n\n  const isPresent = useMemo(\n    () =>\n      typeof matcher === \"function\"\n        ? matcher(fullscreen)\n        : matcher === fullscreen,\n    [matcher, fullscreen],\n  );\n\n  return (\n    <Presence present={forceMount || isPresent}>\n      <Radix.Primitive.div\n        {...fullscreenIndicatorProps}\n        ref={forwardedRef}\n        data-livepeer-controls-fullscreen-indicator=\"\"\n        data-fullscreen={String(Boolean(fullscreen))}\n        data-visible={String(isPresent)}\n      />\n    </Presence>\n  );\n});\n\nFullscreenIndicator.displayName = FULLSCREEN_INDICATOR_NAME;\n\n/**\n * FullscreenTrigger\n */\n\nconst FULLSCREEN_TRIGGER_NAME = \"FullscreenTrigger\";\n\ntype FullscreenTriggerElement = React.ElementRef<typeof Radix.Primitive.button>;\n\ninterface FullscreenTriggerProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.button> {}\n\nconst FullscreenTrigger = React.forwardRef<\n  FullscreenTriggerElement,\n  FullscreenTriggerProps\n>((props: MediaScopedProps<FullscreenTriggerProps>, forwardedRef) => {\n  const { __scopeMedia, ...fullscreenProps } = props;\n\n  const context = useMediaContext(FULLSCREEN_TRIGGER_NAME, __scopeMedia);\n\n  const { title, fullscreen, requestToggleFullscreen } = useStore(\n    context.store,\n    useShallow(({ fullscreen, __controlsFunctions, aria }) => ({\n      fullscreen,\n      requestToggleFullscreen: __controlsFunctions.requestToggleFullscreen,\n      title: aria.fullscreen,\n    })),\n  );\n\n  return (\n    <Radix.Primitive.button\n      type=\"button\"\n      aria-pressed={fullscreen}\n      aria-label={title ?? undefined}\n      title={title ?? undefined}\n      {...fullscreenProps}\n      onClick={composeEventHandlers(\n        props.onClick,\n        noPropagate(requestToggleFullscreen),\n      )}\n      ref={forwardedRef}\n      data-livepeer-controls-fullscreen-trigger=\"\"\n      data-fullscreen-state={String(Boolean(fullscreen))}\n    />\n  );\n});\n\nFullscreenTrigger.displayName = FULLSCREEN_TRIGGER_NAME;\n\nexport { FullscreenIndicator, FullscreenTrigger };\nexport type { FullscreenIndicatorProps, FullscreenTriggerProps };\n","\"use client\";\n\nimport React, { useMemo } from \"react\";\n\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useStore } from \"zustand\";\nimport { type MediaScopedProps, useMediaContext } from \"./context\";\nimport * as Radix from \"./primitive\";\n\nconst LOADING_INDICATOR_NAME = \"LoadingIndicator\";\n\ntype LoadingIndicatorElement = React.ElementRef<typeof Radix.Primitive.div>;\n\ninterface LoadingIndicatorProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.div> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n  /** The matcher used to determine whether the element should be shown, given the `loading` state. Defaults to `true`. */\n  matcher?: boolean | ((live: boolean) => boolean);\n}\n\nconst LoadingIndicator = React.forwardRef<\n  LoadingIndicatorElement,\n  LoadingIndicatorProps\n>((props: MediaScopedProps<LoadingIndicatorProps>, forwardedRef) => {\n  const {\n    __scopeMedia,\n    forceMount,\n    matcher = true,\n    ...offlineErrorProps\n  } = props;\n\n  const context = useMediaContext(LOADING_INDICATOR_NAME, __scopeMedia);\n\n  const loading = useStore(context.store, ({ loading }) => loading);\n\n  const isPresent = useMemo(\n    () =>\n      typeof matcher === \"function\" ? matcher(loading) : matcher === loading,\n    [matcher, loading],\n  );\n\n  return (\n    <Presence present={forceMount || isPresent}>\n      <Radix.Primitive.div\n        aria-label={\"Loading\"}\n        {...offlineErrorProps}\n        ref={forwardedRef}\n        data-livepeer-loading-indicator=\"\"\n        data-loading={String(Boolean(loading))}\n        data-visible={String(isPresent)}\n      />\n    </Presence>\n  );\n});\n\nLoadingIndicator.displayName = LOADING_INDICATOR_NAME;\n\nexport { LoadingIndicator };\nexport type { LoadingIndicatorProps };\n","\"use client\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { Presence } from \"@radix-ui/react-presence\";\n\nimport React from \"react\";\n\nimport { useStore } from \"zustand\";\nimport { type MediaScopedProps, useMediaContext } from \"./context\";\n\nimport { useShallow } from \"zustand/react/shallow\";\nimport * as Radix from \"./primitive\";\nimport { noPropagate } from \"./utils\";\n\nconst PICTURE_IN_PICTURE_TRIGGER_NAME = \"PictureInPictureTrigger\";\n\ntype PictureInPictureTriggerElement = React.ElementRef<\n  typeof Radix.Primitive.button\n>;\n\ninterface PictureInPictureTriggerProps\n  extends Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.button> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst PictureInPictureTrigger = React.forwardRef<\n  PictureInPictureTriggerElement,\n  PictureInPictureTriggerProps\n>((props: MediaScopedProps<PictureInPictureTriggerProps>, forwardedRef) => {\n  const { __scopeMedia, forceMount, ...pictureInPictureProps } = props;\n\n  const context = useMediaContext(\n    PICTURE_IN_PICTURE_TRIGGER_NAME,\n    __scopeMedia,\n  );\n\n  const {\n    pictureInPicture,\n    requestTogglePictureInPicture,\n    isPictureInPictureSupported,\n    fullscreen,\n    title,\n  } = useStore(\n    context.store,\n    useShallow(\n      ({\n        pictureInPicture,\n        __controlsFunctions,\n        __device,\n        fullscreen,\n        aria,\n      }) => ({\n        pictureInPicture,\n        requestTogglePictureInPicture:\n          __controlsFunctions.requestTogglePictureInPicture,\n        isPictureInPictureSupported: __device.isPictureInPictureSupported,\n        fullscreen,\n        title: aria.pictureInPicture,\n      }),\n    ),\n  );\n\n  return (\n    // do not show button if it is not supported or if currently fullscreen\n    <Presence\n      present={forceMount || (isPictureInPictureSupported && !fullscreen)}\n    >\n      <Radix.Primitive.button\n        type=\"button\"\n        aria-pressed={pictureInPicture}\n        aria-label={title ?? undefined}\n        title={title ?? undefined}\n        {...pictureInPictureProps}\n        onClick={composeEventHandlers(\n          props.onClick,\n          noPropagate(requestTogglePictureInPicture),\n        )}\n        ref={forwardedRef}\n        data-livepeer-controls-picture-in-picture-trigger=\"\"\n        data-picture-in-picture={String(Boolean(pictureInPicture))}\n        data-visible={String(isPictureInPictureSupported && !fullscreen)}\n      />\n    </Presence>\n  );\n});\n\nPictureInPictureTrigger.displayName = PICTURE_IN_PICTURE_TRIGGER_NAME;\n\nexport { PictureInPictureTrigger };\nexport type { PictureInPictureTriggerProps };\n","\"use client\";\n\n// biome-ignore lint/style/useImportType: necessary import\nimport React from \"react\";\n\nimport * as RadixPortal from \"@radix-ui/react-portal\";\n\nconst PORTAL_NAME = \"Portal\";\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof RadixPortal.Root>;\n\nconst Portal: React.FC<PortalProps> = (props: PortalProps) => {\n  return <RadixPortal.Root {...props} />;\n};\n\nPortal.displayName = PORTAL_NAME;\n\nexport { Portal, type PortalProps };\n","\"use client\";\n\nimport React from \"react\";\n\nimport { useStore } from \"zustand\";\nimport { type MediaScopedProps, useMediaContext } from \"./context\";\n\nimport { useShallow } from \"zustand/react/shallow\";\nimport * as Radix from \"./primitive\";\n\nconst TIME_NAME = \"Time\";\n\ntype TimeElement = React.ElementRef<typeof Radix.Primitive.button>;\n\ninterface TimeProps\n  extends Omit<\n    Radix.ComponentPropsWithoutRef<typeof Radix.Primitive.button>,\n    \"children\"\n  > {}\n\nconst Time = React.forwardRef<TimeElement, TimeProps>(\n  (props: MediaScopedProps<TimeProps>, forwardedRef) => {\n    const { __scopeMedia, ...timeProps } = props;\n\n    const context = useMediaContext(TIME_NAME, __scopeMedia);\n\n    const { progress, duration, live, formattedTime } = useStore(\n      context.store,\n      useShallow(({ progress, duration, live, aria }) => ({\n        formattedTime: aria.time,\n        progress,\n        duration,\n        live,\n      })),\n    );\n\n    return (\n      <Radix.Primitive.span\n        aria-label={formattedTime ?? undefined}\n        title={formattedTime ?? undefined}\n        {...timeProps}\n        ref={forwardedRef}\n        data-livepeer-controls-time=\"\"\n        data-duration={duration}\n        data-progress={progress}\n        data-live={String(live)}\n      >\n        {formattedTime}\n      </Radix.Primitive.span>\n    );\n  },\n);\n\nTime.displayName = TIME_NAME;\n\nexport { Time };\nexport type { TimeProps };\n"],"mappings":"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","names":["Range","SelectArrow","SelectContent","SelectGroup","SelectIcon","SelectItemIndicator","SelectItemText","SelectLabel","SelectPortal","SelectScrollDownButton","SelectScrollUpButton","SelectSeparator","SelectTrigger","SelectValue","SelectViewport","Thumb","Track","import_zustand","useStoreZustand","React","import_react_presence","import_react","import_zustand","import_primitive","import_shallow","React","hidden","loading","error","import_react","import_react_presence","import_zustand","React","live","import_primitive","import_react","import_zustand","import_shallow","React","import_primitive","import_react","import_react_presence","import_zustand","import_shallow","React","playing","import_react","React","import_react","import_react_presence","import_zustand","React","poster","SelectTrigger","SelectValue","SelectIcon","SelectPortal","SelectContent","SelectViewport","SelectGroup","SelectLabel","SelectItem","SelectItemText","SelectItemIndicator","SelectScrollUpButton","SelectScrollDownButton","SelectSeparator","SelectArrow","import_react","import_zustand","import_primitive","import_shallow","playbackRate","React","SelectItem","import_primitive","Root","Track","Range","Thumb","import_react","import_zustand","import_shallow","import_react_presence","React","duration","buffered","bufferedPercent","progress","live","Root","Track","import_react","import_zustand","import_browser","import_shallow","React","currentSource","poster","volume","import_react","import_zustand","import_primitive","import_shallow","videoQuality","React","SelectItem","import_react","import_zustand","import_react_presence","import_shallow","import_primitive","import_utils","React","volume","Root","import_react","import_zustand","import_shallow","React","fullscreen","playing","canPlay","error","live","hasPlayed","hidden","pictureInPicture","loading","videoQuality","import_react","import_react_presence","import_zustand","React","error","import_react","import_zustand","import_react_presence","import_shallow","import_primitive","React","fullscreen","import_react","import_react_presence","import_zustand","React","loading","import_primitive","import_react_presence","import_react","import_zustand","import_shallow","React","pictureInPicture","fullscreen","import_react","React","import_react","import_zustand","import_shallow","React","progress","duration","live"]}