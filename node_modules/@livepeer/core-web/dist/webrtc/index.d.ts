import { AccessControlParams } from '@livepeer/core/media';

/**
 * Client that uses WHEP to play back video over WebRTC.
 *
 * https://www.ietf.org/id/draft-murillo-whep-00.html
 */
declare const createNewWHEP: <TElement extends HTMLMediaElement>({ source, element, callbacks, accessControl, sdpTimeout, }: {
    source: string;
    element: TElement;
    callbacks: {
        onConnected?: (() => void) | undefined;
        onPlaybackOffsetUpdated?: ((d: number) => void) | undefined;
        onError?: ((data: Error) => void) | undefined;
        onRedirect?: ((url: string | null) => void) | undefined;
    };
    accessControl: AccessControlParams;
    sdpTimeout: number | null;
}) => {
    destroy: () => void;
};

type WebRTCConnectedPayload = {
    stream: MediaStream;
    videoTransceiver: RTCRtpTransceiver;
    audioTransceiver: RTCRtpTransceiver;
};
/**
 * Client that uses WHIP to broadcast video over WebRTC.
 *
 * https://www.ietf.org/archive/id/draft-ietf-wish-whip-01.html
 */
declare const createNewWHIP: <TElement extends HTMLMediaElement>({ ingestUrl, element, callbacks, sdpTimeout, }: {
    ingestUrl: string;
    element: TElement;
    callbacks: {
        onRTCPeerConnection?: ((payload: RTCPeerConnection) => void) | undefined;
        onConnected?: (() => void) | undefined;
        onError?: ((data: Error) => void) | undefined;
    };
    sdpTimeout: number | null;
}) => {
    destroy: () => void;
};
declare const attachMediaStreamToPeerConnection: ({ mediaStream, peerConnection, }: {
    mediaStream: MediaStream;
    peerConnection: RTCPeerConnection;
}) => Promise<void>;
declare const getUserMedia: (constraints?: MediaStreamConstraints) => Promise<MediaStream> | null;
declare const getMediaDevices: () => MediaDevices | null;
declare const getDisplayMedia: (options?: DisplayMediaStreamOptions) => Promise<MediaStream> | null;

export { type WebRTCConnectedPayload, attachMediaStreamToPeerConnection, createNewWHEP, createNewWHIP, getDisplayMedia, getMediaDevices, getUserMedia };
