import { ErrorData, HlsConfig } from 'hls.js';
import { VideoQuality } from '@livepeer/core/media';

declare const VIDEO_HLS_INITIALIZED_ATTRIBUTE = "data-livepeer-video-hls-initialized";
type HlsError = ErrorData;
type VideoConfig = {
    autoplay?: boolean;
};
type HlsVideoConfig = Partial<HlsConfig> & {
    autoPlay?: boolean;
};
/**
 * Checks if hls.js can play in the browser.
 */
declare const isHlsSupported: () => boolean;
/**
 * Create an hls.js instance and attach to the provided media element.
 */
declare const createNewHls: <TElement extends HTMLMediaElement>({ source, element, callbacks, aspectRatio, config, initialQuality, }: {
    source: string;
    element: TElement;
    initialQuality: VideoQuality;
    aspectRatio: number;
    callbacks: {
        onLive?: ((v: boolean) => void) | undefined;
        onPlaybackOffsetUpdated?: ((d: number) => void) | undefined;
        onDuration?: ((v: number) => void) | undefined;
        onCanPlay?: (() => void) | undefined;
        onError?: ((data: HlsError) => void) | undefined;
        onRedirect?: ((url: string | null) => void) | undefined;
    };
    config: HlsVideoConfig;
}) => {
    setQuality: (quality: VideoQuality) => void;
    destroy: () => void;
};

export { type HlsError, type HlsVideoConfig, VIDEO_HLS_INITIALIZED_ATTRIBUTE, type VideoConfig, createNewHls, isHlsSupported };
